for(i in c(1: nrow(input_SV_count))){
sample_tmp_bed <- c()
for(SVTYPE in colnames(input_SV_count)[2:ncol(input_SV_count)]){
if(SVTYPE == "TRA"){
n <- 2*input_SV_count[i, colnames(input_SV_count) == SVTYPE]
}else{
n <- input_SV_count[i, colnames(input_SV_count) == SVTYPE]
}
SV_length <-sample(c(50,100,500,1000,2000,5000,10000,15000,100000,1000000), n, replace = TRUE, prob = c(0.1,0.1,0.2,0.2,0.3,0.5,0.5,0.4,0.2,0.1))
res <- generateRandomPos(n = n, chr = c(seq(1:22),"X","Y"), chr.sizes = seq(0.2,24), width = SV_length, strand = "+")
sample_tmp_bed <- rbind(sample_tmp_bed, data.frame(chrom = paste0("chr",res@seqnames), res@ranges, strand = res@strand, SVTYPE = SVTYPE))
}
write.table(sample_tmp_bed, paste0("/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
input_SV_count$sampleID[i],"_tmp.bed"), quote=FALSE, sep='\t', row.names=FALSE, col.names=FALSE)
system(paste0("/opt/homebrew/bin/bedtools shuffle ",
"-excl /Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/hg38_gaps_centromeres_Telomeres.bed -i ",
"/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
input_SV_count$sampleID[i],"_tmp.bed ",
"-g /Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/hg38.genome ",
"> ",
"/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
"random_",input_SV_count$sampleID[i],".bed"))
random_sample.bed <- read.table(paste0("/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/","random_",input_SV_count$sampleID[i],".bed"))
colnames(random_sample.bed) <- c("chrom1","pos1","pos2","SVLEN","strand1","SVTYPE")
n_TRA <- sum(random_sample.bed$SVTYPE == "TRA")/2
n_total_tmp <- nrow(random_sample.bed)
df <- data.frame(chrom1 = random_sample.bed$chrom1[1:(n_total_tmp-n_TRA)],
pos1 = random_sample.bed$pos1[1:(n_total_tmp-n_TRA)],
chrom2 = c(random_sample.bed$chrom1[1:(n_total_tmp-2*n_TRA)], random_sample.bed$chrom1[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
pos2 = c(random_sample.bed$pos2[1:(n_total_tmp-2*n_TRA)], random_sample.bed$pos2[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
ID = paste0(c(1:(n_total_tmp-n_TRA)),"_1"),
ID_mate = paste0(c(1:(n_total_tmp-n_TRA)),"_2"),
SVTYPE = random_sample.bed$SVTYPE[1:(n_total_tmp-n_TRA)],
SVLEN = random_sample.bed$SVLEN[1:(n_total_tmp-n_TRA)],
strand = random_sample.bed$strand1[1:(n_total_tmp-n_TRA)])
assign(paste0(All_sampleID[i], "_df"), df[!(df$SVTYPE == "TRA" & (df$chrom1 == df$chrom2)),])
}
#save(list = paste0(All_sampleID, "_df"), file = "./input_SV_bed.RData")
do.call(usethis::use_data, c(lapply(paste0(All_sampleID, "_df"), as.name),overwrite = TRUE))
list <- do.call(list, lapply(paste0(All_sampleID, "_df"), as.name))
list <- setNames(list, paste0(All_sampleID, "_df"))
usethis::use_data(list, overwrite = TRUE)
View(random_sample.bed)
View(df)
vcf_file <- "manta_SVEngine_TumorSV2.60x_NormalSV1.60x_0.5.T.PASS.recode.vcf"
bed <- vcf_to_bed(vcf_file)
bed <- vcf_to_dataframe(vcf_file)
vcf_to_dataframe <- function(vcf_file){
vcf <- VariantAnnotation::readVcf(vcf_file)
fixed_df <- vcf@fixed
gr <- vcf@rowRanges
info <- vcf@info
for(field in c("SVTYPE","SVLEN","END", "STRANDS","CT","INV5","INV3","MATEID")){
tmp <- eval(parse(text=paste0("info$", field)))
if (length(tmp) == 0){
assign(paste0("INFO_", field), NA)
}else{
idx <- !(sapply(tmp, length))
tmp[idx] <- NA
if(field == "STRANDS"){
assign(paste0("INFO_", field), sapply(tmp, paste, collapse = ","))
}else{
assign(paste0("INFO_", field), unlist(tmp))
}
}
}
bed <- data.frame(CHROM = gr@seqnames,
POS = gr@ranges@start,
ID_caller = gr@ranges@NAMES,
REF = as.character(fixed_df$REF),
ALT = data.frame(fixed_df$ALT)$value,
QUAL = fixed_df$QUAL,
FILTER = fixed_df$FILTER,
INFO_END,
INFO_SVTYPE,
INFO_SVLEN,
INFO_STRANDS,
INFO_CT = INFO_CT,
INFO_INV5 = INFO_INV5,
INFO_INV3 = INFO_INV3,
INFO_MATEID_caller = INFO_MATEID,
stringsAsFactors = FALSE
)
return(bed)
}
bed <- vcf_to_dataframe(vcf_file)
vcf_file <- system.file("extdata",
"manta_SVEngine_TumorSV2.60x_NormalSV1.60x_0.5.T.PASS.recode.vcf",
package = "ShinySoSV2")
bed <- vcf_to_dataframe(vcf_file)
View(bed)
View(df)
df <- df[!(df$SVTYPE == "TRA" & (df$chrom1 == df$chrom2)),]
DNA = c ("A", "T", "C", "G")
DNA_probabilities = c(0.2, 0.2, 0.2, 0.4)
sample(DNA,
10,
replace=TRUE,
prob=DNA_probabilities)
1/4
df_in <- c()
set.seed(1000)
df_in$CHROM <- df$chrom1
paste0(REF,"[",df$chrom2,":",df$pos2,"[")
REF = sample(c ("A", "T", "C", "G") ,
nrow(df),
replace=TRUE,
prob=c(0.25, 0.25, 0.25, 0.25))
paste0(REF,"[",df$chrom2,":",df$pos2,"[")
?sample
df <- data.frame(chrom1 = random_sample.bed$chrom1[1:(n_total_tmp-n_TRA)],
pos1 = random_sample.bed$pos1[1:(n_total_tmp-n_TRA)],
chrom2 = c(random_sample.bed$chrom1[1:(n_total_tmp-2*n_TRA)], random_sample.bed$chrom1[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
pos2 = c(random_sample.bed$pos2[1:(n_total_tmp-2*n_TRA)], random_sample.bed$pos2[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
ID = paste0(c(1:(n_total_tmp-n_TRA)),"_1"),
ID_mate = paste0(c(1:(n_total_tmp-n_TRA)),"_2"),
SVTYPE = random_sample.bed$SVTYPE[1:(n_total_tmp-n_TRA)],
SVLEN = random_sample.bed$SVLEN[1:(n_total_tmp-n_TRA)],
strand = random_sample.bed$strand1[1:(n_total_tmp-n_TRA)])
df <- df[!(df$SVTYPE == "TRA" & (df$chrom1 == df$chrom2)),]
#assign(paste0(All_sampleID[i], "_df"), df)
df$CHROM = df$chrom1
df$POS = df$pos1
set.seed(1000)
df$REF = sample(c ("A", "T", "C", "G") ,
nrow(df),
replace=TRUE,
prob=c(0.25, 0.25, 0.25, 0.25))
df$ALT <- paste0(df$REF,"[",df$chrom2,":",df$pos2,"[")
df$INFO_SVTYPE <- df$SVTYPE
assign(paste0(All_sampleID[i], "_df"), df[,c(10:14)])
i
View(sample_100_df)
df$ALT[df$SVTYPE %in% c("DEL","TRA")]
df$ALT[df$SVTYPE =="DUP"] <- paste0("]",df$chrom2[df$SVTYPE =="DUP"],":",df$pos2[df$SVTYPE =="DUP"],"]",df$REF[df$SVTYPE =="DUP"])
View(df)
df$ALT[df$SVTYPE =="INV"] <- paste0(df$REF[df$SVTYPE =="INV"],"]",df$chrom2[df$SVTYPE =="INV"],":",df$pos2[df$SVTYPE =="INV"],"]")
df <- data.frame(chrom1 = random_sample.bed$chrom1[1:(n_total_tmp-n_TRA)],
pos1 = random_sample.bed$pos1[1:(n_total_tmp-n_TRA)],
chrom2 = c(random_sample.bed$chrom1[1:(n_total_tmp-2*n_TRA)], random_sample.bed$chrom1[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
pos2 = c(random_sample.bed$pos2[1:(n_total_tmp-2*n_TRA)], random_sample.bed$pos2[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
ID = paste0(c(1:(n_total_tmp-n_TRA)),"_1"),
ID_mate = paste0(c(1:(n_total_tmp-n_TRA)),"_2"),
SVTYPE = random_sample.bed$SVTYPE[1:(n_total_tmp-n_TRA)],
SVLEN = random_sample.bed$SVLEN[1:(n_total_tmp-n_TRA)],
strand = random_sample.bed$strand1[1:(n_total_tmp-n_TRA)])
df <- df[!(df$SVTYPE == "TRA" & (df$chrom1 == df$chrom2)),]
#assign(paste0(All_sampleID[i], "_df"), df)
df$CHROM = df$chrom1
df$POS = df$pos1
set.seed(1000)
df$REF = sample(c ("A", "T", "C", "G") ,
nrow(df),
replace=TRUE,
prob=c(0.25, 0.25, 0.25, 0.25))
df$ALT <- paste0(df$REF,"[",df$chrom2,":",df$pos2,"[")
df$ALT[df$SVTYPE =="DUP"] <- paste0("]",df$chrom2[df$SVTYPE =="DUP"],":",df$pos2[df$SVTYPE =="DUP"],"]",df$REF[df$SVTYPE =="DUP"])
df$ALT[df$SVTYPE =="INV"] <- paste0(df$REF[df$SVTYPE =="INV"],"]",df$chrom2[df$SVTYPE =="INV"],":",df$pos2[df$SVTYPE =="INV"],"]")
df$INFO_SVTYPE <- df$SVTYPE
assign(paste0(All_sampleID[i], "_df"), df[,c(10:14)])
All_sampleID <- paste0("sample_",c(1:100))
set.seed(1)
input_SV_count <- data.frame(sampleID = All_sampleID,
DEL = sample.int(300, 100, replace = TRUE),
DUP = sample.int(300, 100, replace = TRUE),
INS = sample.int(100, 100, replace = TRUE),
INV = sample.int(300, 100, replace = TRUE),
TRA = sample.int(300, 100, replace = TRUE))
for(i in c(1: nrow(input_SV_count))){
sample_tmp_bed <- c()
for(SVTYPE in colnames(input_SV_count)[2:ncol(input_SV_count)]){
if(SVTYPE == "TRA"){
n <- 2*input_SV_count[i, colnames(input_SV_count) == SVTYPE]
}else{
n <- input_SV_count[i, colnames(input_SV_count) == SVTYPE]
}
SV_length <-sample(c(50,100,500,1000,2000,5000,10000,15000,100000,1000000), n, replace = TRUE, prob = c(0.1,0.1,0.2,0.2,0.3,0.5,0.5,0.4,0.2,0.1))
res <- generateRandomPos(n = n, chr = c(seq(1:22),"X","Y"), chr.sizes = seq(0.2,24), width = SV_length, strand = "+")
sample_tmp_bed <- rbind(sample_tmp_bed, data.frame(chrom = paste0("chr",res@seqnames), res@ranges, strand = res@strand, SVTYPE = SVTYPE))
}
write.table(sample_tmp_bed, paste0("/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
input_SV_count$sampleID[i],"_tmp.bed"), quote=FALSE, sep='\t', row.names=FALSE, col.names=FALSE)
system(paste0("/opt/homebrew/bin/bedtools shuffle ",
"-excl /Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/hg38_gaps_centromeres_Telomeres.bed -i ",
"/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
input_SV_count$sampleID[i],"_tmp.bed ",
"-g /Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/hg38.genome ",
"> ",
"/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
"random_",input_SV_count$sampleID[i],".bed"))
random_sample.bed <- read.table(paste0("/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/","random_",input_SV_count$sampleID[i],".bed"))
colnames(random_sample.bed) <- c("chrom1","pos1","pos2","SVLEN","strand1","SVTYPE")
n_TRA <- sum(random_sample.bed$SVTYPE == "TRA")/2
n_total_tmp <- nrow(random_sample.bed)
df <- data.frame(chrom1 = random_sample.bed$chrom1[1:(n_total_tmp-n_TRA)],
pos1 = random_sample.bed$pos1[1:(n_total_tmp-n_TRA)],
chrom2 = c(random_sample.bed$chrom1[1:(n_total_tmp-2*n_TRA)], random_sample.bed$chrom1[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
pos2 = c(random_sample.bed$pos2[1:(n_total_tmp-2*n_TRA)], random_sample.bed$pos2[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
ID = paste0(c(1:(n_total_tmp-n_TRA)),"_1"),
ID_mate = paste0(c(1:(n_total_tmp-n_TRA)),"_2"),
SVTYPE = random_sample.bed$SVTYPE[1:(n_total_tmp-n_TRA)],
SVLEN = random_sample.bed$SVLEN[1:(n_total_tmp-n_TRA)],
strand = random_sample.bed$strand1[1:(n_total_tmp-n_TRA)])
df <- df[!(df$SVTYPE == "TRA" & (df$chrom1 == df$chrom2)),]
#assign(paste0(All_sampleID[i], "_df"), df)
df$CHROM = df$chrom1
df$POS = df$pos1
set.seed(1000)
df$REF = sample(c ("A", "T", "C", "G") ,
nrow(df),
replace=TRUE,
prob=c(0.25, 0.25, 0.25, 0.25))
df$ALT <- paste0(df$REF,"[",df$chrom2,":",df$pos2,"[")
df$ALT[df$SVTYPE =="DUP"] <- paste0("]",df$chrom2[df$SVTYPE =="DUP"],":",df$pos2[df$SVTYPE =="DUP"],"]",df$REF[df$SVTYPE =="DUP"])
df$ALT[df$SVTYPE =="INV"] <- paste0(df$REF[df$SVTYPE =="INV"],"]",df$chrom2[df$SVTYPE =="INV"],":",df$pos2[df$SVTYPE =="INV"],"]")
df$INFO_SVTYPE <- df$SVTYPE
assign(paste0(All_sampleID[i], "_df"), df[,c(10:14)])
}
list <- setNames(list, paste0(All_sampleID, "_df"))
usethis::use_data(list, overwrite = TRUE)
devtools::document()
random_pos <- sapply(random_chr,function(chrTmp){sample(chr.sizes[chr==chrTmp],1)})
###Test data for Sv type composition, NOT USE, three manta VCFs used
generateRandomPos <- function(n,chr,chr.sizes,width,strand){
random_chr <- sample(x=chr,size=n,prob=chr.sizes,replace=T)
random_pos <- sapply(random_chr,function(chrTmp){sample(chr.sizes[chr==chrTmp],1)})
res <- GenomicRanges::GRanges(random_chr,IRanges::IRanges(random_pos, random_pos+width), strand = strand)
return(res)
}
All_sampleID <- paste0("sample_",c(1:100))
set.seed(1)
input_SV_count <- data.frame(sampleID = All_sampleID,
DEL = sample.int(300, 100, replace = TRUE),
DUP = sample.int(300, 100, replace = TRUE),
INS = sample.int(100, 100, replace = TRUE),
INV = sample.int(300, 100, replace = TRUE),
TRA = sample.int(300, 100, replace = TRUE))
for(i in c(1: nrow(input_SV_count))){
sample_tmp_bed <- c()
for(SVTYPE in colnames(input_SV_count)[2:ncol(input_SV_count)]){
if(SVTYPE == "TRA"){
n <- 2*input_SV_count[i, colnames(input_SV_count) == SVTYPE]
}else{
n <- input_SV_count[i, colnames(input_SV_count) == SVTYPE]
}
SV_length <-sample(c(50,100,500,1000,2000,5000,10000,15000,100000,1000000), n, replace = TRUE, prob = c(0.1,0.1,0.2,0.2,0.3,0.5,0.5,0.4,0.2,0.1))
res <- generateRandomPos(n = n, chr = c(seq(1:22),"X","Y"), chr.sizes = seq(0.2,24), width = SV_length, strand = "+")
sample_tmp_bed <- rbind(sample_tmp_bed, data.frame(chrom = paste0("chr",res@seqnames), res@ranges, strand = res@strand, SVTYPE = SVTYPE))
}
write.table(sample_tmp_bed, paste0("/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
input_SV_count$sampleID[i],"_tmp.bed"), quote=FALSE, sep='\t', row.names=FALSE, col.names=FALSE)
system(paste0("/opt/homebrew/bin/bedtools shuffle ",
"-excl /Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/hg38_gaps_centromeres_Telomeres.bed -i ",
"/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
input_SV_count$sampleID[i],"_tmp.bed ",
"-g /Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/hg38.genome ",
"> ",
"/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
"random_",input_SV_count$sampleID[i],".bed"))
random_sample.bed <- read.table(paste0("/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/","random_",input_SV_count$sampleID[i],".bed"))
colnames(random_sample.bed) <- c("chrom1","pos1","pos2","SVLEN","strand1","SVTYPE")
n_TRA <- sum(random_sample.bed$SVTYPE == "TRA")/2
n_total_tmp <- nrow(random_sample.bed)
df <- data.frame(chrom1 = random_sample.bed$chrom1[1:(n_total_tmp-n_TRA)],
pos1 = random_sample.bed$pos1[1:(n_total_tmp-n_TRA)],
chrom2 = c(random_sample.bed$chrom1[1:(n_total_tmp-2*n_TRA)], random_sample.bed$chrom1[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
pos2 = c(random_sample.bed$pos2[1:(n_total_tmp-2*n_TRA)], random_sample.bed$pos2[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
ID = paste0(c(1:(n_total_tmp-n_TRA)),"_1"),
ID_mate = paste0(c(1:(n_total_tmp-n_TRA)),"_2"),
SVTYPE = random_sample.bed$SVTYPE[1:(n_total_tmp-n_TRA)],
SVLEN = random_sample.bed$SVLEN[1:(n_total_tmp-n_TRA)],
strand = random_sample.bed$strand1[1:(n_total_tmp-n_TRA)])
df <- df[!(df$SVTYPE == "TRA" & (df$chrom1 == df$chrom2)),]
#assign(paste0(All_sampleID[i], "_df"), df)
df$CHROM = df$chrom1
df$POS = df$pos1
set.seed(1000)
df$REF = sample(c ("A", "T", "C", "G") ,
nrow(df),
replace=TRUE,
prob=c(0.25, 0.25, 0.25, 0.25))
df$ALT <- paste0(df$REF,"[",df$chrom2,":",df$pos2,"[")
df$ALT[df$SVTYPE =="DUP"] <- paste0("]",df$chrom2[df$SVTYPE =="DUP"],":",df$pos2[df$SVTYPE =="DUP"],"]",df$REF[df$SVTYPE =="DUP"])
df$ALT[df$SVTYPE =="INV"] <- paste0(df$REF[df$SVTYPE =="INV"],"]",df$chrom2[df$SVTYPE =="INV"],":",df$pos2[df$SVTYPE =="INV"],"]")
df$INFO_SVTYPE <- df$SVTYPE
assign(paste0(All_sampleID[i], "_df"), df[,c(10:14)])
}
#save(list = paste0(All_sampleID, "_df"), file = "./input_SV_bed.RData")
#do.call(usethis::use_data, c(lapply(paste0(All_sampleID, "_df"), as.name),overwrite = TRUE))
list <- do.call(list, lapply(paste0(All_sampleID, "_df"), as.name))
usethis::use_data(list, overwrite = TRUE)
?sample.int
All_sampleID <- paste0("sample_",c(1:100))
set.seed(1)
input_SV_count <- data.frame(sampleID = All_sampleID,
DEL = c(sample.int(300, 100, replace = TRUE),sample.int(c(500:1000), 5, replace = TRUE)),
DUP = sample.int(300, 100, replace = TRUE),
INS = sample.int(100, 100, replace = TRUE),
INV = sample.int(300, 100, replace = TRUE),
TRA = sample.int(300, 100, replace = TRUE))
input_SV_count <- data.frame(sampleID = All_sampleID,
DEL = c(sample.int(300, 95, replace = TRUE),sample.int(c(500:1000), 5, replace = TRUE)),
DUP = sample.int(300, 100, replace = TRUE),
INS = sample.int(100, 100, replace = TRUE),
INV = sample.int(300, 100, replace = TRUE),
TRA = sample.int(300, 100, replace = TRUE))
View(input_SV_count)
sample.int(c(500:1000), 5, replace = TRUE)
sample.int(1:2, 5, replace = TRUE)
sample.int(1:9, 5, replace = TRUE)
sample.int(c(1,9), 5, replace = TRUE)
sample(c(100:101), 5, replace = TRUE)
sample(5, 5, replace = TRUE)
sample(100, 5, replace = TRUE)
input_SV_count <- data.frame(sampleID = All_sampleID,
DEL = c(sample(300, 95, replace = TRUE),sample.int(c(500:1000), 5, replace = TRUE)),
DUP = sample(300, 100, replace = TRUE),
INS = sample(100, 100, replace = TRUE),
INV = sample(300, 100, replace = TRUE),
TRA = sample(300, 100, replace = TRUE))
View(input_SV_count)
input_SV_count <- data.frame(sampleID = All_sampleID,
DEL = c(sample(300, 95, replace = TRUE),sample(c(500:1000), 5, replace = TRUE)),
DUP = sample(300, 100, replace = TRUE),
INS = sample(100, 100, replace = TRUE),
INV = sample(300, 100, replace = TRUE),
TRA = sample(300, 100, replace = TRUE))
View(input_SV_count)
for(i in c(1: nrow(input_SV_count))){
sample_tmp_bed <- c()
for(SVTYPE in colnames(input_SV_count)[2:ncol(input_SV_count)]){
if(SVTYPE == "TRA"){
n <- 2*input_SV_count[i, colnames(input_SV_count) == SVTYPE]
}else{
n <- input_SV_count[i, colnames(input_SV_count) == SVTYPE]
}
SV_length <-sample(c(50,100,500,1000,2000,5000,10000,15000,100000,1000000), n, replace = TRUE, prob = c(0.1,0.1,0.2,0.2,0.3,0.5,0.5,0.4,0.2,0.1))
res <- generateRandomPos(n = n, chr = c(seq(1:22),"X","Y"), chr.sizes = seq(0.2,24), width = SV_length, strand = "+")
sample_tmp_bed <- rbind(sample_tmp_bed, data.frame(chrom = paste0("chr",res@seqnames), res@ranges, strand = res@strand, SVTYPE = SVTYPE))
}
write.table(sample_tmp_bed, paste0("/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
input_SV_count$sampleID[i],"_tmp.bed"), quote=FALSE, sep='\t', row.names=FALSE, col.names=FALSE)
system(paste0("/opt/homebrew/bin/bedtools shuffle ",
"-excl /Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/hg38_gaps_centromeres_Telomeres.bed -i ",
"/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
input_SV_count$sampleID[i],"_tmp.bed ",
"-g /Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/hg38.genome ",
"> ",
"/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
"random_",input_SV_count$sampleID[i],".bed"))
random_sample.bed <- read.table(paste0("/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/","random_",input_SV_count$sampleID[i],".bed"))
colnames(random_sample.bed) <- c("chrom1","pos1","pos2","SVLEN","strand1","SVTYPE")
n_TRA <- sum(random_sample.bed$SVTYPE == "TRA")/2
n_total_tmp <- nrow(random_sample.bed)
df <- data.frame(chrom1 = random_sample.bed$chrom1[1:(n_total_tmp-n_TRA)],
pos1 = random_sample.bed$pos1[1:(n_total_tmp-n_TRA)],
chrom2 = c(random_sample.bed$chrom1[1:(n_total_tmp-2*n_TRA)], random_sample.bed$chrom1[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
pos2 = c(random_sample.bed$pos2[1:(n_total_tmp-2*n_TRA)], random_sample.bed$pos2[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
ID = paste0(c(1:(n_total_tmp-n_TRA)),"_1"),
ID_mate = paste0(c(1:(n_total_tmp-n_TRA)),"_2"),
SVTYPE = random_sample.bed$SVTYPE[1:(n_total_tmp-n_TRA)],
SVLEN = random_sample.bed$SVLEN[1:(n_total_tmp-n_TRA)],
strand = random_sample.bed$strand1[1:(n_total_tmp-n_TRA)])
df <- df[!(df$SVTYPE == "TRA" & (df$chrom1 == df$chrom2)),]
#assign(paste0(All_sampleID[i], "_df"), df)
df$CHROM = df$chrom1
df$POS = df$pos1
set.seed(1000)
df$REF = sample(c ("A", "T", "C", "G") ,
nrow(df),
replace=TRUE,
prob=c(0.25, 0.25, 0.25, 0.25))
df$ALT <- paste0(df$REF,"[",df$chrom2,":",df$pos2,"[")
df$ALT[df$SVTYPE =="DUP"] <- paste0("]",df$chrom2[df$SVTYPE =="DUP"],":",df$pos2[df$SVTYPE =="DUP"],"]",df$REF[df$SVTYPE =="DUP"])
df$ALT[df$SVTYPE =="INV"] <- paste0(df$REF[df$SVTYPE =="INV"],"]",df$chrom2[df$SVTYPE =="INV"],":",df$pos2[df$SVTYPE =="INV"],"]")
df$INFO_SVTYPE <- df$SVTYPE
assign(paste0(All_sampleID[i], "_df"), df[,c(10:14)])
}
###Test data for Sv type composition, NOT USE, three manta VCFs used
generateRandomPos <- function(n,chr,chr.sizes,width,strand){
random_chr <- sample(x=chr,size=n,prob=chr.sizes,replace=T)
random_pos <- sapply(random_chr,function(chrTmp){sample(chr.sizes[chr==chrTmp],1)})
res <- GenomicRanges::GRanges(random_chr,IRanges::IRanges(random_pos, random_pos+width), strand = strand)
return(res)
}
All_sampleID <- paste0("sample_",c(1:100))
set.seed(1)
input_SV_count <- data.frame(sampleID = All_sampleID,
DEL = c(sample(300, 95, replace = TRUE),sample(c(500:1000), 5, replace = TRUE)),
DUP = sample(300, 100, replace = TRUE),
INS = sample(100, 100, replace = TRUE),
INV = sample(300, 100, replace = TRUE),
TRA = sample(300, 100, replace = TRUE))
for(i in c(1: nrow(input_SV_count))){
sample_tmp_bed <- c()
for(SVTYPE in colnames(input_SV_count)[2:ncol(input_SV_count)]){
if(SVTYPE == "TRA"){
n <- 2*input_SV_count[i, colnames(input_SV_count) == SVTYPE]
}else{
n <- input_SV_count[i, colnames(input_SV_count) == SVTYPE]
}
SV_length <-sample(c(50,100,500,1000,2000,5000,10000,15000,100000,1000000), n, replace = TRUE, prob = c(0.1,0.1,0.2,0.2,0.3,0.5,0.5,0.4,0.2,0.1))
res <- generateRandomPos(n = n, chr = c(seq(1:22),"X","Y"), chr.sizes = seq(0.2,24), width = SV_length, strand = "+")
sample_tmp_bed <- rbind(sample_tmp_bed, data.frame(chrom = paste0("chr",res@seqnames), res@ranges, strand = res@strand, SVTYPE = SVTYPE))
}
write.table(sample_tmp_bed, paste0("/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
input_SV_count$sampleID[i],"_tmp.bed"), quote=FALSE, sep='\t', row.names=FALSE, col.names=FALSE)
system(paste0("/opt/homebrew/bin/bedtools shuffle ",
"-excl /Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/hg38_gaps_centromeres_Telomeres.bed -i ",
"/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
input_SV_count$sampleID[i],"_tmp.bed ",
"-g /Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/hg38.genome ",
"> ",
"/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
"random_",input_SV_count$sampleID[i],".bed"))
random_sample.bed <- read.table(paste0("/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/","random_",input_SV_count$sampleID[i],".bed"))
colnames(random_sample.bed) <- c("chrom1","pos1","pos2","SVLEN","strand1","SVTYPE")
n_TRA <- sum(random_sample.bed$SVTYPE == "TRA")/2
n_total_tmp <- nrow(random_sample.bed)
df <- data.frame(chrom1 = random_sample.bed$chrom1[1:(n_total_tmp-n_TRA)],
pos1 = random_sample.bed$pos1[1:(n_total_tmp-n_TRA)],
chrom2 = c(random_sample.bed$chrom1[1:(n_total_tmp-2*n_TRA)], random_sample.bed$chrom1[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
pos2 = c(random_sample.bed$pos2[1:(n_total_tmp-2*n_TRA)], random_sample.bed$pos2[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
ID = paste0(c(1:(n_total_tmp-n_TRA)),"_1"),
ID_mate = paste0(c(1:(n_total_tmp-n_TRA)),"_2"),
SVTYPE = random_sample.bed$SVTYPE[1:(n_total_tmp-n_TRA)],
SVLEN = random_sample.bed$SVLEN[1:(n_total_tmp-n_TRA)],
strand = random_sample.bed$strand1[1:(n_total_tmp-n_TRA)])
df <- df[!(df$SVTYPE == "TRA" & (df$chrom1 == df$chrom2)),]
#assign(paste0(All_sampleID[i], "_df"), df)
df$CHROM = df$chrom1
df$POS = df$pos1
set.seed(1000)
df$REF = sample(c ("A", "T", "C", "G") ,
nrow(df),
replace=TRUE,
prob=c(0.25, 0.25, 0.25, 0.25))
df$ALT <- paste0(df$REF,"[",df$chrom2,":",df$pos2,"[")
df$ALT[df$SVTYPE =="DUP"] <- paste0("]",df$chrom2[df$SVTYPE =="DUP"],":",df$pos2[df$SVTYPE =="DUP"],"]",df$REF[df$SVTYPE =="DUP"])
df$ALT[df$SVTYPE =="INV"] <- paste0(df$REF[df$SVTYPE =="INV"],"]",df$chrom2[df$SVTYPE =="INV"],":",df$pos2[df$SVTYPE =="INV"],"]")
df$INFO_SVTYPE <- df$SVTYPE
assign(paste0(All_sampleID[i], "_df"), df[,c(10:14)])
}
#save(list = paste0(All_sampleID, "_df"), file = "./input_SV_bed.RData")
#do.call(usethis::use_data, c(lapply(paste0(All_sampleID, "_df"), as.name),overwrite = TRUE))
list <- do.call(list, lapply(paste0(All_sampleID, "_df"), as.name))
#list <- setNames(list, paste0(All_sampleID, "_df"))
usethis::use_data(list, overwrite = TRUE)
devtools::document()
###Test data for CNV integration, currently use sample UP2003 in HRPCa project, re-named as sample4
SCNV <- read.table(system.file("extdata",
"CNV_sample4.cns",
package = "StructuralVariantUtil"), header = TRUE)
SCNV <- read.table("CNV_sample4.cns",header=TRUE)
SCNV <- read.table("./inst/extdata/CNV_sample4.cns",header=TRUE)
SCNV <- read.table("./inst/extdata/CNV_sample4.cns",header=TRUE)
CNV_bed <- SCNV[,c(1,2,3,6)]
usethis::use_data(CNV_bed, overwrite = TRUE)
###Test data for CNV integration, currently use sample UP2003 in HRPCa project, re-named as sample4
#SCNV <- read.table(system.file("extdata",
#                               "CNV_sample4.cns",
#                               package = "StructuralVariantUtil"), header = TRUE)
SCNV <- read.table("./inst/extdata/CNV_sample4.cns",header=TRUE)
CNV_data <- SCNV[,c(1,2,3,6)]
usethis::use_data(CNV_data, overwrite = TRUE)
verbose()
cbind(2, c(1,2))
devtools::document()
devtools::install_github("tgong1/StructuralVariantUtil", auth_token = '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')
######################################################################################################
######################################## Installation ################################################
######################################################################################################
devtools::install_github("tgong1/StructuralVariantUtil")
devtools::install_github("tgong1/StructuralVariantUtil", auth_token = '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')
devtools::install_github("tgong1/StructuralVariantUtil", auth_token = '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')
library(StructuralVariantUtil)
#############################################################################################################################
######################################## SV breakpoint gene annotation ##############################
#############################################################################################################################
vcf_file = system.file("extdata", "manta_sample1.vcf", package = "StructuralVariantUtil")
df <- vcf_to_dataframe(vcf_file = vcf_file)
SV_data <- simple_SVTYPE_classification(df, caller_name = "manta")[[1]]
head(SV_data)
devtools::document()
vcf_file <- "./inst/extdata/GRIDSS_SVEngine_TumorSV2.60x_NormalSV1.60x_0.5_somatic_PASS_annotated.vcf"
vcf <- VariantAnnotation::readVcf(vcf_file)
ID <- vcf@rowRanges@ranges@NAMES
set.seed(1)
vcf_tmp <- vcf[vcf@rowRanges@ranges@NAMES %in% ID[sample(1:length(ID),40)],]
VariantAnnotation::writeVcf(vcf_tmp, "gridss_sample1.vcf")
devtools::document()
devtools::document()
setwd("~/Desktop/work_at_home/HRPCa_SV_method_paper/StructuralVariantUtil")
devtools::document()
2/1550
2/0.001188
2/1685
2/1686
2/1684
1684/2
943*2
caller_name=NULL
is.null(caller_name)
DIR="/Users/tingtinggong/Desktop/Fudan_University/Lung_cancer_project/Evaluation/COLO829/"
vcf_file <- paste0(DIR,"delly_COLO829_VAF_1_Tcov_80_Ncov_30.sv.somatic.PASS.recode.vcf")
df <- StructuralVariantUtil::vcf_to_dataframe(vcf_file)
head(df)
table(df$INFO_SVTYPE)
library(StructuralVariantUtil)
DIR="/Users/tingtinggong/Desktop/Fudan_University/Lung_cancer_project/Evaluation/COLO829/"
vcf_file <- paste0(DIR,"delly_COLO829_VAF_1_Tcov_80_Ncov_30.sv.somatic.PASS.recode.vcf")
df <- StructuralVariantUtil::vcf_to_dataframe(vcf_file)
