devtools::document()
set.seed(1)
ShinySoSV_newdata <- data.frame(sampleID = paste0("sample_",c(1:100)),
VAF = round(rnorm(100, mean=0.5, sd=0.1),digits = 2),
N_coverage = round(rnorm(100, mean=30, sd=10),digits = 2),
T_coverage = round(rnorm(100, mean=60, sd=10),digits = 2),
BND_threshold = 100)
usethis::use_data(ShinySoSV_newdata,overwrite = TRUE)
devtools::install()
usethis::use_vignette("vignette")
install.packages("rmarkdown")
?render
render("vignette.Rmd","pdf_document")
library("rmarkdown")
render("vignette.Rmd","pdf_document")
render("vignettes/vignette.Rmd","pdf_document")
render("vignettes/vignette.Rmd")
install.packages("tinytex")
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::install_tinytex()
install.packages("tinytex")
install.packages("tinytex")
tinytex::install_tinytex()
render("vignettes/vignette.Rmd","pdf_document")
library("rmarkdown")
render("vignettes/vignette.Rmd","pdf_document")
devtools::document()
load(url("https://github.com/tgong1/Shiny-SoSV/tree/master/data/gamsen_callers.RData"))
x <- RCurl::getURL("https://github.com/tgong1/Shiny-SoSV/tree/master/data/gamsen_callers.RData")
y <- load(x)
save(version = 3)
directory <- "~/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script2/"
model_name1 <- paste0(c("sen", "pre_off", "F1_score"))
model_name2 <- paste0(c("", "_UnionIntersect", "_UnionIntersect"))
model_name <- apply(expand.grid(model_name1, model_name2), 1, paste, collapse="")
for(i in c(1:length(model_name))){
load(paste0(directory,"./Shiny-SoSV/data/","gam",model_name[i],"_callers.RData"))
}
candidate_callers <- c("Manta", "GRIDSS", "Delly","Lumpy","SvABA")
combine_SV_SVcaller <- c()
for(callset in c("union","intersection","individual")){
if(callset %in% c("union","intersection")){
for (i in c(1:length(candidate_callers))){
combine_SV_SVcaller <- c(combine_SV_SVcaller, paste0(candidate_callers[i], candidate_callers[!(c(1:length(candidate_callers)) %in% i)],c("Union","Intersect")[c("union", "intersection") %in% callset]))
}
}else{
combine_SV_SVcaller <- c(combine_SV_SVcaller, candidate_callers)
}
}
do.call(usethis::use_data, c(lapply(c(paste0("gamsen_", combine_SV_SVcaller),
paste0("gampre_off_", combine_SV_SVcaller),
paste0("gamF1_score_", combine_SV_SVcaller)), as.name),internal = TRUE, overwrite = TRUE))
####
#source("/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/workflow_functions.R")
sampleID <- "HCC1395_SPP_GT"
bkpt_T_callers = 100
SVTYPE_ignore = FALSE
SVCaller_name <- c("Manta","SvABA")
SVCall_bed_name <- paste0(SVCaller_name, "_", sampleID,"_df")
#SVCaller_name <- c("Manta","SvABA","GRIDSS")
#SVCall_bed_name <- paste0(SVCaller_name, "_", sampleID,"_df")
SV_integrated <- StructuralVariantUtil::SV_integration(sampleID, SVCaller_name, SVCall_bed_name,bkpt_T_callers,SVTYPE_ignore, bedtools_dir = paste0("/opt/homebrew/bin/bedtools"))
setwd("~/Desktop/Fudan_University/Lung_cancer_project/HCC1395/R_script")
vcf_file <- "./manta_HCC1395_SPP_GT.T.PASS.recode.vcf"
bed <- StructuralVariantUtil::vcf_to_bed(vcf_file)
head(bed)
tail(bed)
bed_SVTYPE_classified <- StructuralVariantUtil::simple_SVTYPE_classification(bed,"Manta")
bed_SVTYPE_classified <- bed_SVTYPE_classified[bed_SVTYPE_classified$chrom1 %in% paste0("chr", c(1:22,"X","Y")) &
bed_SVTYPE_classified$chrom2 %in% paste0("chr", c(1:22,"X","Y")) ,]
head(bed_SVTYPE_classified)
Manta_HCC1395_SPP_GT_df <- bed_SVTYPE_classified
StructuralVariantUtil::SVTYPE_stat_generate(Manta_HCC1395_SPP_GT_df)
#### SvABA
vcf_file <- "./svaba_HCC1395_SPP_GT.svaba.somatic.sv.vcf"
bed_SV <- StructuralVariantUtil::vcf_to_bed(vcf_file)
vcf_file <- "./svaba_HCC1395_SPP_GT.svaba.somatic.indel.vcf"
### save all gam models to sysdata.rda
directory <- "~/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script2/"
model_name1 <- paste0(c("sen", "pre_off", "F1_score"))
model_name2 <- paste0(c("", "_UnionIntersect", "_UnionIntersect"))
model_name <- apply(expand.grid(model_name1, model_name2), 1, paste, collapse="")
for(i in c(1:length(model_name))){
load(paste0(directory,"./Shiny-SoSV/data/","gam",model_name[i],"_callers.RData"))
}
candidate_callers <- c("Manta", "GRIDSS", "Delly","Lumpy","SvABA")
combine_SV_SVcaller <- c()
for(callset in c("union","intersection","individual")){
if(callset %in% c("union","intersection")){
for (i in c(1:length(candidate_callers))){
combine_SV_SVcaller <- c(combine_SV_SVcaller, paste0(candidate_callers[i], candidate_callers[!(c(1:length(candidate_callers)) %in% i)],c("Union","Intersect")[c("union", "intersection") %in% callset]))
}
}else{
combine_SV_SVcaller <- c(combine_SV_SVcaller, candidate_callers)
}
}
do.call(usethis::use_data, c(lapply(c(paste0("gamsen_", combine_SV_SVcaller),
paste0("gampre_off_", combine_SV_SVcaller),
paste0("gamF1_score_", combine_SV_SVcaller)), as.name),internal = TRUE, overwrite = TRUE))
source(paste0("sysdata.rda"))
candidate_callers <- c("Manta","Lumpy","GRIDSS","Delly","SvABA")
set.seed(1)
newdata <- data.frame(sampleID = paste0("sample_",c(1:100)), VAF = round(rnorm(100, mean=0.5, sd=0.1),digits = 2), N_coverage = round(rnorm(100, mean=30, sd=10),digits = 2), T_coverage = round(rnorm(100, mean=60, sd=10),digits = 2), BND_threshold = 100)
head(newdata)
performance <- "F1_score"
callset <- "individual"
df_prediction <- ShinySoSV_prediction(Candidate_callers, newdata, performance, callset)
head(df_prediction)
#' ShinySoSV prediction
#'
#' This function predict the SV calling performance of SV callers and their combinations
#'
#' @param candidate_callers names of callers
#' @param newdata data frame of variables with which to predict
#' @param performance should be any of "sensitivity", "precision" or "F1 score"
#' @param callset individual caller, pairwise union or intersection
#' @return data frame of predicted performance
#' @export
ShinySoSV_prediction <- function(Candidate_callers, newdata, performance, callset){
model_name1 <- paste0(c("sen", "pre_off", "F1_score")[c("sensitivity", "precision", "F1_score") %in% performance])
model_name2 <- paste0(c("", "_UnionIntersect", "_UnionIntersect")[c("individual", "union", "intersection") %in% callset])
model_name <- apply(expand.grid(model_name1, model_name2), 1, paste, collapse="")
# for(i in c(1:length(model_name))){
#load(paste0("./Shiny-SoSV/data/","gam",model_name[i],"_callers.RData"))
#load(paste0("sysdata.rda"))
source(paste0("R/sysdata.rda"))
# }
combine_SV_SVcaller <- c()
for(i in c(1:length(callset))){
if(callset[i] %in% c("union","intersection")){
for (i in c(1:length(candidate_callers))){
combine_SV_SVcaller <- c(combine_SV_SVcaller, paste0(candidate_callers[i], candidate_callers[!(c(1:length(candidate_callers)) %in% i)],c("Union","Intersect")[c("union", "intersection") %in% callset]))
}
}else{
combine_SV_SVcaller <- c(combine_SV_SVcaller, candidate_callers)
}
}
df_prediction <- c()
for(i in c(1: length(combine_SV_SVcaller))){
for(j in c(1: length(model_name1))){
prediction <- predict(eval(parse(text = paste0("gam", model_name1[j],"_", combine_SV_SVcaller[i]))), newdata, type = "response",se.fit = T,unconditional = TRUE)$fit
df_prediction <- data.frame(cbind(df_prediction, prediction))
tmp <- paste0(c("sensitivity", "precision", "F1_score")[c("sen", "pre_off", "F1_score") %in% model_name1[j]])
colnames(df_prediction)[ncol(df_prediction)] <- paste0("fit_",tmp,"_", combine_SV_SVcaller[i])
}
}
df_prediction <- cbind(newdata, df_prediction)
write.csv(df_prediction,file = "./Shiny-SoSV_prediction.csv",row.names = FALSE)
return(df_prediction)
}
df_prediction <- ShinySoSV_prediction(Candidate_callers, newdata, performance, callset)
head(df_prediction)
sysdata.rda
StructuralVariantUtil:::sysdata.rda
# for(i in c(1:length(model_name))){
#load(paste0("./Shiny-SoSV/data/","gam",model_name[i],"_callers.RData"))
#load(paste0("sysdata.rda"))
load(paste0("sysdata.rda"))
# for(i in c(1:length(model_name))){
#load(paste0("./Shiny-SoSV/data/","gam",model_name[i],"_callers.RData"))
#load(paste0("sysdata.rda"))
load(paste0("R/sysdata.rda"))
do.call(usethis::use_data, c(lapply(c(paste0("gamsen_", combine_SV_SVcaller),
paste0("gampre_off_", combine_SV_SVcaller),
paste0("gamF1_score_", combine_SV_SVcaller)), as.name),internal = TRUE, overwrite = TRUE))
### save all gam models to sysdata.rda
directory <- "~/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script2/"
model_name1 <- paste0(c("sen", "pre_off", "F1_score"))
model_name2 <- paste0(c("", "_UnionIntersect", "_UnionIntersect"))
model_name <- apply(expand.grid(model_name1, model_name2), 1, paste, collapse="")
for(i in c(1:length(model_name))){
load(paste0(directory,"./Shiny-SoSV/data/","gam",model_name[i],"_callers.RData"))
}
candidate_callers <- c("Manta", "GRIDSS", "Delly","Lumpy","SvABA")
combine_SV_SVcaller <- c()
for(callset in c("union","intersection","individual")){
if(callset %in% c("union","intersection")){
for (i in c(1:length(candidate_callers))){
combine_SV_SVcaller <- c(combine_SV_SVcaller, paste0(candidate_callers[i], candidate_callers[!(c(1:length(candidate_callers)) %in% i)],c("Union","Intersect")[c("union", "intersection") %in% callset]))
}
}else{
combine_SV_SVcaller <- c(combine_SV_SVcaller, candidate_callers)
}
}
do.call(usethis::use_data, c(lapply(c(paste0("gamsen_", combine_SV_SVcaller),
paste0("gampre_off_", combine_SV_SVcaller),
paste0("gamF1_score_", combine_SV_SVcaller)), as.name),internal = TRUE, overwrite = TRUE))
### save all gam models to sysdata.rda
directory <- "~/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script2/"
model_name1 <- paste0(c("sen", "pre_off", "F1_score"))
model_name2 <- paste0(c("", "_UnionIntersect", "_UnionIntersect"))
model_name <- apply(expand.grid(model_name1, model_name2), 1, paste, collapse="")
for(i in c(1:length(model_name))){
load(paste0(directory,"./Shiny-SoSV/data/","gam",model_name[i],"_callers.RData"))
}
candidate_callers <- c("Manta", "GRIDSS", "Delly","Lumpy","SvABA")
combine_SV_SVcaller <- c()
for(callset in c("union","intersection","individual")){
if(callset %in% c("union","intersection")){
for (i in c(1:length(candidate_callers))){
combine_SV_SVcaller <- c(combine_SV_SVcaller, paste0(candidate_callers[i], candidate_callers[!(c(1:length(candidate_callers)) %in% i)],c("Union","Intersect")[c("union", "intersection") %in% callset]))
}
}else{
combine_SV_SVcaller <- c(combine_SV_SVcaller, candidate_callers)
}
}
do.call(usethis::use_data, c(lapply(c(paste0("gamsen_", combine_SV_SVcaller),
#paste0("gampre_off_", combine_SV_SVcaller),
# paste0("gamF1_score_", combine_SV_SVcaller)
), as.name),internal = TRUE, overwrite = TRUE))
do.call(usethis::use_data, c(lapply(c(paste0("gamsen_", combine_SV_SVcaller)
#paste0("gampre_off_", combine_SV_SVcaller),
# paste0("gamF1_score_", combine_SV_SVcaller)
), as.name),internal = TRUE, overwrite = TRUE))
do.call(usethis::use_data, c(lapply(c(paste0("gamsen_", combine_SV_SVcaller)
#paste0("gampre_off_", combine_SV_SVcaller),
# paste0("gamF1_score_", combine_SV_SVcaller)
), as.name),internal = TRUE, overwrite = TRUE))
