n <- 2*input_SV_count[i, colnames(input_SV_count) == SVTYPE]
}else{
n <- input_SV_count[i, colnames(input_SV_count) == SVTYPE]
}
SV_length <-sample(c(50,100,500,1000,2000,5000,10000,15000,100000,1000000), n, replace = TRUE, prob = c(0.1,0.1,0.2,0.2,0.3,0.5,0.5,0.4,0.2,0.1))
res <- generateRandomPos(n = n, chr = c(seq(1:22),"X","Y"), chr.sizes = seq(0.2,24), width = SV_length, strand = "+")
sample_tmp_bed <- rbind(sample_tmp_bed, data.frame(chrom = paste0("chr",res@seqnames), res@ranges, strand = res@strand, SVTYPE = SVTYPE))
}
write.table(sample_tmp_bed, paste0("/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
input_SV_count$sampleID[i],"_tmp.bed"), quote=FALSE, sep='\t', row.names=FALSE, col.names=FALSE)
system(paste0("/opt/homebrew/bin/bedtools shuffle ",
"-excl /Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/hg38_gaps_centromeres_Telomeres.bed -i ",
"/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
input_SV_count$sampleID[i],"_tmp.bed ",
"-g /Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/hg38.genome ",
"> ",
"/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
"random_",input_SV_count$sampleID[i],".bed"))
random_sample.bed <- read.table(paste0("/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/","random_",input_SV_count$sampleID[i],".bed"))
colnames(random_sample.bed) <- c("chrom1","pos1","pos2","SVLEN","strand1","SVTYPE")
n_TRA <- sum(random_sample.bed$SVTYPE == "TRA")/2
n_total_tmp <- nrow(random_sample.bed)
df <- data.frame(chrom1 = random_sample.bed$chrom1[1:(n_total_tmp-n_TRA)],
pos1 = random_sample.bed$pos1[1:(n_total_tmp-n_TRA)],
chrom2 = c(random_sample.bed$chrom1[1:(n_total_tmp-2*n_TRA)], random_sample.bed$chrom1[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
pos2 = c(random_sample.bed$pos2[1:(n_total_tmp-2*n_TRA)], random_sample.bed$pos2[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
ID = paste0(c(1:(n_total_tmp-n_TRA)),"_1"),
ID_mate = paste0(c(1:(n_total_tmp-n_TRA)),"_2"),
SVTYPE = random_sample.bed$SVTYPE[1:(n_total_tmp-n_TRA)],
SVLEN = random_sample.bed$SVLEN[1:(n_total_tmp-n_TRA)],
strand = random_sample.bed$strand1[1:(n_total_tmp-n_TRA)])
df <- df[!(df$SVTYPE == "TRA" & (df$chrom1 == df$chrom2)),]
#assign(paste0(All_sampleID[i], "_df"), df)
df$CHROM = df$chrom1
df$POS = df$pos1
set.seed(1000)
df$REF = sample(c ("A", "T", "C", "G") ,
nrow(df),
replace=TRUE,
prob=c(0.25, 0.25, 0.25, 0.25))
df$ALT <- paste0(df$REF,"[",df$chrom2,":",df$pos2,"[")
df$ALT[df$SVTYPE =="DUP"] <- paste0("]",df$chrom2[df$SVTYPE =="DUP"],":",df$pos2[df$SVTYPE =="DUP"],"]",df$REF[df$SVTYPE =="DUP"])
df$ALT[df$SVTYPE =="INV"] <- paste0(df$REF[df$SVTYPE =="INV"],"]",df$chrom2[df$SVTYPE =="INV"],":",df$pos2[df$SVTYPE =="INV"],"]")
df$INFO_SVTYPE <- df$SVTYPE
assign(paste0(All_sampleID[i], "_df"), df[,c(10:14)])
}
#save(list = paste0(All_sampleID, "_df"), file = "./input_SV_bed.RData")
#do.call(usethis::use_data, c(lapply(paste0(All_sampleID, "_df"), as.name),overwrite = TRUE))
list <- do.call(list, lapply(paste0(All_sampleID, "_df"), as.name))
#list <- setNames(list, paste0(All_sampleID, "_df"))
usethis::use_data(list, overwrite = TRUE)
devtools::document()
###Test data for CNV integration, currently use sample UP2003 in HRPCa project, re-named as sample4
SCNV <- read.table(system.file("extdata",
"CNV_sample4.cns",
package = "StructuralVariantUtil"), header = TRUE)
SCNV <- read.table("CNV_sample4.cns",header=TRUE)
SCNV <- read.table("./inst/extdata/CNV_sample4.cns",header=TRUE)
SCNV <- read.table("./inst/extdata/CNV_sample4.cns",header=TRUE)
CNV_bed <- SCNV[,c(1,2,3,6)]
usethis::use_data(CNV_bed, overwrite = TRUE)
###Test data for CNV integration, currently use sample UP2003 in HRPCa project, re-named as sample4
#SCNV <- read.table(system.file("extdata",
#                               "CNV_sample4.cns",
#                               package = "StructuralVariantUtil"), header = TRUE)
SCNV <- read.table("./inst/extdata/CNV_sample4.cns",header=TRUE)
CNV_data <- SCNV[,c(1,2,3,6)]
usethis::use_data(CNV_data, overwrite = TRUE)
verbose()
cbind(2, c(1,2))
devtools::document()
devtools::install_github("tgong1/StructuralVariantUtil", auth_token = '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')
######################################################################################################
######################################## Installation ################################################
######################################################################################################
devtools::install_github("tgong1/StructuralVariantUtil")
devtools::install_github("tgong1/StructuralVariantUtil", auth_token = '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')
devtools::install_github("tgong1/StructuralVariantUtil", auth_token = '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')
library(StructuralVariantUtil)
#############################################################################################################################
######################################## SV breakpoint gene annotation ##############################
#############################################################################################################################
vcf_file = system.file("extdata", "manta_sample1.vcf", package = "StructuralVariantUtil")
df <- vcf_to_dataframe(vcf_file = vcf_file)
SV_data <- simple_SVTYPE_classification(df, caller_name = "manta")[[1]]
head(SV_data)
devtools::document()
vcf_file <- "./inst/extdata/GRIDSS_SVEngine_TumorSV2.60x_NormalSV1.60x_0.5_somatic_PASS_annotated.vcf"
vcf <- VariantAnnotation::readVcf(vcf_file)
ID <- vcf@rowRanges@ranges@NAMES
set.seed(1)
vcf_tmp <- vcf[vcf@rowRanges@ranges@NAMES %in% ID[sample(1:length(ID),40)],]
VariantAnnotation::writeVcf(vcf_tmp, "gridss_sample1.vcf")
devtools::document()
devtools::document()
setwd("~/Desktop/work_at_home/HRPCa_SV_method_paper/StructuralVariantUtil")
devtools::document()
2/1550
2/0.001188
2/1685
2/1686
2/1684
1684/2
943*2
caller_name=NULL
is.null(caller_name)
DIR="/Users/tingtinggong/Desktop/Fudan_University/Lung_cancer_project/Evaluation/COLO829/"
vcf_file <- paste0(DIR,"delly_COLO829_VAF_1_Tcov_80_Ncov_30.sv.somatic.PASS.recode.vcf")
df <- StructuralVariantUtil::vcf_to_dataframe(vcf_file)
head(df)
table(df$INFO_SVTYPE)
library(StructuralVariantUtil)
DIR="/Users/tingtinggong/Desktop/Fudan_University/Lung_cancer_project/Evaluation/COLO829/"
vcf_file <- paste0(DIR,"delly_COLO829_VAF_1_Tcov_80_Ncov_30.sv.somatic.PASS.recode.vcf")
df <- StructuralVariantUtil::vcf_to_dataframe(vcf_file)
DIR="/Users/tingtinggong/Desktop/Fudan_University/Lung_cancer_project/Evaluation/"
vcf_file <- paste0(DIR,"COLO829/delly_COLO829_VAF_1_Tcov_80_Ncov_30.sv.somatic.PASS.recode.vcf")
df <- StructuralVariantUtil::vcf_to_dataframe(vcf_file)
head(df)
table(df$INFO_SVTYPE)
bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(vcf_file,"delly")
#bedpe <- simple_SVTYPE_classification(vcf_file,"delly")
table(bedpe$SVTYPE)
vcf_file <- paste0(DIR, "COLO829/truthset_somaticSVs_COLO829.vcf")
df <- StructuralVariantUtil::vcf_to_dataframe(vcf_file)
head(df)
table(df$INFO_SVTYPE)
#df2 <- df[stringr::str_split_fixed(as.character(df$ID_caller), "_", 3)[,3]==1,]
bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(vcf_file,"truth")
#bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(df2,"truth")
#bedpe <- simple_SVTYPE_classification(vcf_file,"truth")
table(bedpe$SVTYPE)
library(StructuralVariantUtil)
#df2 <- df[stringr::str_split_fixed(as.character(df$ID_caller), "_", 3)[,3]==1,]
bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(vcf_file,"truth")
#bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(df2,"truth")
#bedpe <- simple_SVTYPE_classification(vcf_file,"truth")
table(bedpe$SVTYPE)
StructuralVariantUtil::simple_SVTYPE_classification
devtools::install_github("tgong1/StructuralVariantUtil", auth_token = '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')
library(StructuralVariantUtil)
DIR="/Users/tingtinggong/Desktop/Fudan_University/Lung_cancer_project/Evaluation/"
vcf_file <- paste0(DIR,"COLO829/delly_COLO829_VAF_1_Tcov_80_Ncov_30.sv.somatic.PASS.recode.vcf")
df <- StructuralVariantUtil::vcf_to_dataframe(vcf_file)
head(df)
table(df$INFO_SVTYPE)
bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(vcf_file,"delly")
#bedpe <- simple_SVTYPE_classification(vcf_file,"delly")
table(bedpe$SVTYPE)
vcf_file <- paste0(DIR, "COLO829/truthset_somaticSVs_COLO829.vcf")
df <- StructuralVariantUtil::vcf_to_dataframe(vcf_file)
head(df)
table(df$INFO_SVTYPE)
#df2 <- df[stringr::str_split_fixed(as.character(df$ID_caller), "_", 3)[,3]==1,]
bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(vcf_file,"truth")
#bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(df2,"truth")
#bedpe <- simple_SVTYPE_classification(vcf_file,"truth")
table(bedpe$SVTYPE)
bedpe <- Standard_bedtool_prepare_bkpt(vcf_files[1], bkpt_T_callers, caller = SVCaller_names[1])
Standard_bedtool_prepare_bkpt <- function(SV_data, bkpt_T_callers,caller){
caller_bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(SV_data, caller)
bedpe <- data.frame(chrom1 = caller_bedpe$chrom1,
start1 = caller_bedpe$start1-(bkpt_T_callers/2),
end1 = caller_bedpe$end1+(bkpt_T_callers/2),
chrom2 = caller_bedpe$chrom2,
start2 = caller_bedpe$start2-(bkpt_T_callers/2),
end2 = caller_bedpe$end2+(bkpt_T_callers/2),
ID = paste0(caller_bedpe$ID,";",caller_bedpe$SVTYPE,";",caller_bedpe$FILTER))
if (sum(bedpe$start1<0)!=0){bedpe[bedpe$start1<0,]$start1 <- 0}
if (sum(bedpe$start2<0)!=0){bedpe[bedpe$start2<0,]$start2 <- 0}
return(bedpe)
}
bedpe <- Standard_bedtool_prepare_bkpt(vcf_files[1], bkpt_T_callers, caller = SVCaller_names[1])
write.table(bedpe, paste0(DIR, sampleID, "/",SVCaller_names[1],"_sv.bedpe"), quote=FALSE, sep='\t', row.names=FALSE, col.names=FALSE)
DIR="/Users/tingtinggong/Desktop/Fudan_University/Lung_cancer_project/Evaluation/"
setwd(DIR)
sampleID <- "COLO829"
vcf_files <- c(paste0(DIR,"COLO829/delly_COLO829_VAF_1_Tcov_80_Ncov_30.sv.somatic.PASS.recode.vcf"),
paste0(DIR, "COLO829/truthset_somaticSVs_COLO829.vcf"))
bkpt_T_callers <- 200
SVCaller_names <- c("delly","truth")
bedtools_dir = "/opt/homebrew/bin/bedtools"
bedpe <- Standard_bedtool_prepare_bkpt(vcf_files[1], bkpt_T_callers, caller = SVCaller_names[1])
write.table(bedpe, paste0(DIR, sampleID, "/",SVCaller_names[1],"_sv.bedpe"), quote=FALSE, sep='\t', row.names=FALSE, col.names=FALSE)
bedpe <- Standard_bedtool_prepare_bkpt(vcf_files[2], bkpt_T_callers, caller = SVCaller_names[2])
write.table(bedpe, paste0(DIR, sampleID, "/",SVCaller_names[2],"_sv.bedpe"), quote=FALSE, sep='\t', row.names=FALSE, col.names=FALSE)
cat(paste(sampleID, SVCaller_names[1], "and", SVCaller_names[2],"VCF read and bedpe write.\n"))
system(paste(bedtools_dir,"pairtopair -a", paste0(DIR, sampleID, "/",SVCaller_names[1],"_sv.bedpe"),
"-b", paste0(DIR, sampleID, "/",SVCaller_names[2],"_sv.bedpe"), ">",
paste0(DIR, sampleID, "/",SVCaller_names[1],"_vs_",SVCaller_names[2],"_sv.bedpe")))
pairtopair <- read.table( paste0(DIR, sampleID, "/",SVCaller_names[1],"_vs_",SVCaller_names[2],"_sv.bedpe"), header =FALSE, sep="\t",stringsAsFactors=FALSE, quote="")
pairtopair <- cbind(pairtopair[,c(1:6)],
stringr::str_split_fixed(pairtopair[,7],";",3)[,1],
stringr::str_split_fixed(pairtopair[,7],";",3)[,2],
stringr::str_split_fixed(pairtopair[,7],";",3)[,3],
pairtopair[,c(8:13)],
stringr::str_split_fixed(pairtopair[,14],";",3)[,1],
stringr::str_split_fixed(pairtopair[,14],";",3)[,2],
stringr::str_split_fixed(pairtopair[,14],";",3)[,3])
colnames(pairtopair) <- c("caller1_chrom1","caller1_start1","caller1_end1",
"caller1_chrom2","caller1_start2","caller1_end2",
"caller1_ID","caller1_SVTYPE","caller1_FILTER",
"caller2_chrom1","caller2_start1","caller2_end1",
"caller2_chrom2","caller2_start2","caller2_end2",
"caller2_ID","caller2_SVTYPE","caller2_FILTER")
main_chroms <- c("chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7",
"chr8", "chr9", "chr10", "chr11", "chr12", "chr13", "chr14",
"chr15", "chr16", "chr17", "chr18", "chr19", "chr20", "chr21", "chr22", "chrX", "chrY")
pairtopair <- pairtopair[(pairtopair$caller1_chrom1 %in% main_chroms) &
(pairtopair$caller1_chrom2 %in% main_chroms) &
(pairtopair$caller2_chrom1 %in% main_chroms) &
(pairtopair$caller2_chrom2 %in% main_chroms),]
#df2 <- df[stringr::str_split_fixed(as.character(df$ID_caller), "_", 3)[,3]==1,]
bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(vcf_file,"truth")
#bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(df2,"truth")
#bedpe <- simple_SVTYPE_classification(vcf_file,"truth")
table(bedpe$SVTYPE)
bedpe <- Standard_bedtool_prepare_bkpt(vcf_files[1], bkpt_T_callers, caller = SVCaller_names[1])
write.table(bedpe, paste0(DIR, sampleID, "/",SVCaller_names[1],"_sv.bedpe"), quote=FALSE, sep='\t', row.names=FALSE, col.names=FALSE)
bedpe <- Standard_bedtool_prepare_bkpt(vcf_files[2], bkpt_T_callers, caller = SVCaller_names[2])
write.table(bedpe, paste0(DIR, sampleID, "/",SVCaller_names[2],"_sv.bedpe"), quote=FALSE, sep='\t', row.names=FALSE, col.names=FALSE)
cat(paste(sampleID, SVCaller_names[1], "and", SVCaller_names[2],"VCF read and bedpe write.\n"))
system(paste(bedtools_dir,"pairtopair -a", paste0(DIR, sampleID, "/",SVCaller_names[1],"_sv.bedpe"),
"-b", paste0(DIR, sampleID, "/",SVCaller_names[2],"_sv.bedpe"), ">",
paste0(DIR, sampleID, "/",SVCaller_names[1],"_vs_",SVCaller_names[2],"_sv.bedpe")))
pairtopair <- read.table( paste0(DIR, sampleID, "/",SVCaller_names[1],"_vs_",SVCaller_names[2],"_sv.bedpe"), header =FALSE, sep="\t",stringsAsFactors=FALSE, quote="")
View(pairtopair)
pairtopair <- cbind(pairtopair[,c(1:6)],
stringr::str_split_fixed(pairtopair[,7],";",3)[,1],
stringr::str_split_fixed(pairtopair[,7],";",3)[,2],
stringr::str_split_fixed(pairtopair[,7],";",3)[,3],
pairtopair[,c(8:13)],
stringr::str_split_fixed(pairtopair[,14],";",3)[,1],
stringr::str_split_fixed(pairtopair[,14],";",3)[,2],
stringr::str_split_fixed(pairtopair[,14],";",3)[,3])
colnames(pairtopair) <- c("caller1_chrom1","caller1_start1","caller1_end1",
"caller1_chrom2","caller1_start2","caller1_end2",
"caller1_ID","caller1_SVTYPE","caller1_FILTER",
"caller2_chrom1","caller2_start1","caller2_end1",
"caller2_chrom2","caller2_start2","caller2_end2",
"caller2_ID","caller2_SVTYPE","caller2_FILTER")
main_chroms <- c("chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7",
"chr8", "chr9", "chr10", "chr11", "chr12", "chr13", "chr14",
"chr15", "chr16", "chr17", "chr18", "chr19", "chr20", "chr21", "chr22", "chrX", "chrY")
pairtopair <- pairtopair[(pairtopair$caller1_chrom1 %in% main_chroms) &
(pairtopair$caller1_chrom2 %in% main_chroms) &
(pairtopair$caller2_chrom1 %in% main_chroms) &
(pairtopair$caller2_chrom2 %in% main_chroms),]
DIR <- "./"
dir.create(paste0(DIR, sampleID))
pairtopair <- SVCaller_union_intersect_generate(sampleID, vcf_files, bkpt_T_callers, SVCaller_names, bedtools_dir, DIR)
PASS_filter <- "both"
svtype_ignore <- FALSE
if(PASS_filter=="both" & (!svtype_ignore)){
bed_filtered <- pairtopair[pairtopair$caller1_FILTER=="PASS" & pairtopair$caller2_FILTER=="PASS" &
pairtopair$caller1_SVTYPE == pairtopair$caller2_SVTYPE ,]
}else if(PASS_filter=="one"& (!svtype_ignore)){
bed_filtered <- pairtopair[(pairtopair$caller1_FILTER=="PASS" | pairtopair$caller2_FILTER=="PASS") &
pairtopair$caller1_SVTYPE == pairtopair$caller2_SVTYPE,]
}else{bed_filtered <- pairtopair[pairtopair$caller1_SVTYPE == pairtopair$caller2_SVTYPE,]}
View(bed_filtered)
caller1_bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(vcf_files[1], caller= SVCaller_names[1])
caller1_bedpe_filtered <- caller1_bedpe[caller1_bedpe$ID %in% bed_filtered$caller1_ID, ]
View(caller1_bedpe_filtered)
library(StructuralVariantUtil)
SVCaller_union_intersect_generate <- function(sampleID, vcf_files, bkpt_T_callers, SVCaller_names, bedtools_dir, DIR){
bedpe <- Standard_bedtool_prepare_bkpt(vcf_files[1], bkpt_T_callers, caller = SVCaller_names[1])
write.table(bedpe, paste0(DIR, sampleID, "/",SVCaller_names[1],"_sv.bedpe"), quote=FALSE, sep='\t', row.names=FALSE, col.names=FALSE)
bedpe <- Standard_bedtool_prepare_bkpt(vcf_files[2], bkpt_T_callers, caller = SVCaller_names[2])
write.table(bedpe, paste0(DIR, sampleID, "/",SVCaller_names[2],"_sv.bedpe"), quote=FALSE, sep='\t', row.names=FALSE, col.names=FALSE)
cat(paste(sampleID, SVCaller_names[1], "and", SVCaller_names[2],"bedpe write.\n"))
system(paste(bedtools_dir,"pairtopair -a", paste0(DIR, sampleID, "/",SVCaller_names[1],"_sv.bedpe"),
"-b", paste0(DIR, sampleID, "/",SVCaller_names[2],"_sv.bedpe"), ">",
paste0(DIR, sampleID, "/",SVCaller_names[1],"_vs_",SVCaller_names[2],"_sv.bedpe")))
if(file.info(paste0(DIR, sampleID, "/",SVCaller_names[1],"_vs_",SVCaller_names[2],"_sv.bedpe"))$size==0){
pairtopair <- c()
}else{
pairtopair <- read.table(paste0(DIR, sampleID, "/",SVCaller_names[1],"_vs_",SVCaller_names[2],"_sv.bedpe"), header =FALSE, sep="\t",stringsAsFactors=FALSE, quote="")
pairtopair <- cbind(pairtopair[,c(1:6)],
stringr::str_split_fixed(pairtopair[,7],";",3)[,1],
stringr::str_split_fixed(pairtopair[,7],";",3)[,2],
stringr::str_split_fixed(pairtopair[,7],";",3)[,3],
pairtopair[,c(8:13)],
stringr::str_split_fixed(pairtopair[,14],";",3)[,1],
stringr::str_split_fixed(pairtopair[,14],";",3)[,2],
stringr::str_split_fixed(pairtopair[,14],";",3)[,3])
colnames(pairtopair) <- c("caller1_chrom1","caller1_start1","caller1_end1",
"caller1_chrom2","caller1_start2","caller1_end2",
"caller1_ID","caller1_SVTYPE","caller1_FILTER",
"caller2_chrom1","caller2_start1","caller2_end1",
"caller2_chrom2","caller2_start2","caller2_end2",
"caller2_ID","caller2_SVTYPE","caller2_FILTER")
main_chroms <- c("chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7",
"chr8", "chr9", "chr10", "chr11", "chr12", "chr13", "chr14",
"chr15", "chr16", "chr17", "chr18", "chr19", "chr20", "chr21", "chr22", "chrX", "chrY")
pairtopair <- pairtopair[(pairtopair$caller1_chrom1 %in% main_chroms) &
(pairtopair$caller1_chrom2 %in% main_chroms) &
(pairtopair$caller2_chrom1 %in% main_chroms) &
(pairtopair$caller2_chrom2 %in% main_chroms),]
}
return(pairtopair)
}
SV_integration <- function(sampleID, vcf_files, bkpt_T_callers, SVCaller_names, PASS_filter, svtype_ignore,bedtools_dir){
DIR <- "./"
dir.create(paste0(DIR, sampleID))
pairtopair <- SVCaller_union_intersect_generate(sampleID, vcf_files, bkpt_T_callers, SVCaller_names, bedtools_dir, DIR)
if(length(pairtopair)==0){
caller1_bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(vcf_files[1], caller= SVCaller_names[1])
caller1_bedpe$caller2_ID <- NA
}else{
if(PASS_filter=="both" & (!svtype_ignore)){
pairtopair_filtered <- pairtopair[pairtopair$caller1_FILTER=="PASS" & pairtopair$caller2_FILTER=="PASS" &
pairtopair$caller1_SVTYPE == pairtopair$caller2_SVTYPE ,]
}else if(PASS_filter=="one"& (!svtype_ignore)){
pairtopair_filtered <- pairtopair[(pairtopair$caller1_FILTER=="PASS" | pairtopair$caller2_FILTER=="PASS") &
pairtopair$caller1_SVTYPE == pairtopair$caller2_SVTYPE,]
}else{pairtopair_filtered <- pairtopair[pairtopair$caller1_SVTYPE == pairtopair$caller2_SVTYPE,]}
caller1_bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(vcf_files[1], caller= SVCaller_names[1])
caller1_bedpe_filtered <- caller1_bedpe[caller1_bedpe$ID %in% pairtopair_filtered$caller1_ID, ]
caller1_ID <- unique(pairtopair_filtered$caller1_ID)
caller2_ID <- c()
for(i in c(1:length(unique(pairtopair_filtered$caller1_ID)))){
caller2_ID <- c(caller2_ID,
paste(pairtopair_filtered[pairtopair_filtered$caller1_ID == caller1_ID[i],]$caller2_ID, collapse = ","))
}
caller1_bedpe$caller2_ID <- NA
caller1_bedpe$caller2_ID[match(caller1_ID, caller1_bedpe$ID)] <- caller2_ID
vcf <- VariantAnnotation::readVcf(file= vcf_files[1], "hg38")
gr <- vcf@rowRanges
vcf_filtered <- vcf[gr@ranges@NAMES %in% c(caller1_bedpe_filtered$ID_caller,
caller1_bedpe_filtered$INFO_MATEID_caller[!is.na(caller1_bedpe_filtered$INFO_MATEID_caller)]),]
VariantAnnotation::writeVcf(vcf_filtered , paste0("SVUtil_",sampleID,"_",SVCaller_names[1], "_vs_",SVCaller_names[2],"_", PASS_filter,"_PASS_","sametype",".vcf"))
cat(paste0(sampleID," filtered VCF write.\n"))
}
return(caller1_bedpe)
}
Standard_bedtool_prepare_bkpt <- function(SV_data, bkpt_T_callers,caller){
caller_bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(SV_data, caller)
bedpe <- data.frame(chrom1 = caller_bedpe$chrom1,
start1 = caller_bedpe$start1-(bkpt_T_callers/2),
end1 = caller_bedpe$end1+(bkpt_T_callers/2),
chrom2 = caller_bedpe$chrom2,
start2 = caller_bedpe$start2-(bkpt_T_callers/2),
end2 = caller_bedpe$end2+(bkpt_T_callers/2),
ID = paste0(caller_bedpe$ID,";",caller_bedpe$SVTYPE,";",caller_bedpe$FILTER))
if (sum(bedpe$start1<0)!=0){bedpe[bedpe$start1<0,]$start1 <- 0}
if (sum(bedpe$start2<0)!=0){bedpe[bedpe$start2<0,]$start2 <- 0}
return(bedpe)
}
DIR <- "./"
setwd(DIR)
sampleID <- "COLO829"
######## Comparing to truth
vcf_files <- c(paste0(DIR,"COLO829/delly_COLO829_VAF_1_Tcov_80_Ncov_30.sv.somatic.PASS.recode.vcf"),
paste0(DIR, "COLO829/truthset_somaticSVs_COLO829.vcf")); SVCaller_names <- c("delly","truth")
bkpt_T_callers <- 100
bedtools_dir = "/opt/homebrew/bin/bedtools"
PASS_filter <- "both"
svtype_ignore <- FALSE
start_time <- Sys.time()
caller1_bedpe <- SV_integration(sampleID, vcf_files, bkpt_T_callers, SVCaller_names, PASS_filter="both", svtype_ignore=FALSE, bedtools_dir)
DIR="/Users/tingtinggong/Desktop/Fudan_University/Lung_cancer_project/Evaluation/"
setwd(DIR)
######## Comparing to truth
vcf_files <- c(paste0(DIR,"COLO829/delly_COLO829_VAF_1_Tcov_80_Ncov_30.sv.somatic.PASS.recode.vcf"),
paste0(DIR, "COLO829/truthset_somaticSVs_COLO829.vcf")); SVCaller_names <- c("delly","truth")
bkpt_T_callers <- 100
bedtools_dir = "/opt/homebrew/bin/bedtools"
PASS_filter <- "both"
svtype_ignore <- FALSE
start_time <- Sys.time()
caller1_bedpe <- SV_integration(sampleID, vcf_files, bkpt_T_callers, SVCaller_names, PASS_filter="both", svtype_ignore=FALSE, bedtools_dir)
end_time <- Sys.time()
cat(paste(sampleID,SVCaller_names[1], "and", SVCaller_names[2], "intersection VCF write ", end_time, " Time spent: ", end_time - start_time, "\n"))
caller1_bedpe_intersection <- caller1_bedpe[!is.na(caller1_bedpe$caller2_ID),]
nrow(caller1_bedpe_intersection)
vcf_files <- c(paste0(DIR,"COLO829/gridss_COLO829_VAF_1_Tcov_80_Ncov_30.sv.somatic.vcf"),
paste0(DIR, "COLO829/truthset_somaticSVs_COLO829.vcf")); SVCaller_names <- c("gridss","truth")
bkpt_T_callers <- 100
bedtools_dir = "/opt/homebrew/bin/bedtools"
PASS_filter <- "both"
svtype_ignore <- FALSE
start_time <- Sys.time()
caller1_bedpe <- SV_integration(sampleID, vcf_files, bkpt_T_callers, SVCaller_names, PASS_filter="both", svtype_ignore=FALSE, bedtools_dir)
end_time <- Sys.time()
cat(paste(sampleID,SVCaller_names[1], "and", SVCaller_names[2], "intersection VCF write ", end_time, " Time spent: ", end_time - start_time, "\n"))
caller1_bedpe_intersection <- caller1_bedpe[!is.na(caller1_bedpe$caller2_ID),]
nrow(caller1_bedpe_intersection)
######## CHECKING VCF from each caller
vcf_file <- paste0(DIR,"COLO829/delly_COLO829_VAF_1_Tcov_80_Ncov_30.sv.somatic.PASS.recode.vcf"); caller_name <- "delly"
df <- StructuralVariantUtil::vcf_to_dataframe(vcf_file)
head(df)
table(df$INFO_SVTYPE)
bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(vcf_file,caller_name)
table(bedpe$SVTYPE)
View(bedpe)
#vcf_files <- c("all",
#               paste0(DIR, "COLO829/truthset_somaticSVs_COLO829.vcf"))
#SVCaller_names <- c("all","truth")
#caller1_bedpe <- SV_integration(sampleID, vcf_files, bkpt_T_callers, SVCaller_names, PASS_filter="both", svtype_ignore=FALSE, bedtools_dir)
vcf_files <- c(paste0(DIR,"COLO829/delly_COLO829_VAF_1_Tcov_80_Ncov_30.sv.somatic.PASS.recode.vcf"),
paste0(DIR, "COLO829/truthset_somaticSVs_COLO829.vcf")); SVCaller_names <- c("delly","truth")
df_SV <- rbind(StructuralVariantUtil::vcf_to_dataframe(vcf_files[1]),
StructuralVariantUtil::vcf_to_dataframe(vcf_files[2]))
for(i in c(1:length(vcf_files))){
vcf_files_tmp <- c("all",vcf_files[i])
SVCaller_names_tmp <- c("all", SVCaller_names[i])
caller1_bedpe_tmp <- SV_integration(sampleID, df_SV, vcf_files_tmp, bkpt_T_callers, SVCaller_names_tmp, PASS_filter, svtype_ignore,bedtools_dir)
if(i == 1){
caller1_bedpe <- caller1_bedpe_tmp
}else{
caller1_bedpe <- cbind(caller1_bedpe, caller1_bedpe_tmp[,24])
colnames(caller1_bedpe)[ncol(caller1_bedpe)] <- paste0(SVCaller_names[i],"_ID")
}
}
library(StructuralVariantUtil)
SVCaller_union_intersect_generate <- function(sampleID, vcf_files, bkpt_T_callers, SVCaller_names, bedtools_dir, DIR){
bedpe <- Standard_bedtool_prepare_bkpt(vcf_files[1], bkpt_T_callers, caller = SVCaller_names[1])
write.table(bedpe, paste0(DIR, sampleID, "/",SVCaller_names[1],"_sv.bedpe"), quote=FALSE, sep='\t', row.names=FALSE, col.names=FALSE)
bedpe <- Standard_bedtool_prepare_bkpt(vcf_files[2], bkpt_T_callers, caller = SVCaller_names[2])
write.table(bedpe, paste0(DIR, sampleID, "/",SVCaller_names[2],"_sv.bedpe"), quote=FALSE, sep='\t', row.names=FALSE, col.names=FALSE)
cat(paste(sampleID, SVCaller_names[1], "and", SVCaller_names[2],"bedpe write.\n"))
system(paste(bedtools_dir,"pairtopair -a", paste0(DIR, sampleID, "/",SVCaller_names[1],"_sv.bedpe"),
"-b", paste0(DIR, sampleID, "/",SVCaller_names[2],"_sv.bedpe"), ">",
paste0(DIR, sampleID, "/",SVCaller_names[1],"_vs_",SVCaller_names[2],"_sv.bedpe")))
if(file.info(paste0(DIR, sampleID, "/",SVCaller_names[1],"_vs_",SVCaller_names[2],"_sv.bedpe"))$size==0){
pairtopair <- c()
}else{
pairtopair <- read.table(paste0(DIR, sampleID, "/",SVCaller_names[1],"_vs_",SVCaller_names[2],"_sv.bedpe"), header =FALSE, sep="\t",stringsAsFactors=FALSE, quote="")
pairtopair <- cbind(pairtopair[,c(1:6)],
stringr::str_split_fixed(pairtopair[,7],";",3)[,1],
stringr::str_split_fixed(pairtopair[,7],";",3)[,2],
stringr::str_split_fixed(pairtopair[,7],";",3)[,3],
pairtopair[,c(8:13)],
stringr::str_split_fixed(pairtopair[,14],";",3)[,1],
stringr::str_split_fixed(pairtopair[,14],";",3)[,2],
stringr::str_split_fixed(pairtopair[,14],";",3)[,3])
colnames(pairtopair) <- c("caller1_chrom1","caller1_start1","caller1_end1",
"caller1_chrom2","caller1_start2","caller1_end2",
"caller1_ID","caller1_SVTYPE","caller1_FILTER",
"caller2_chrom1","caller2_start1","caller2_end1",
"caller2_chrom2","caller2_start2","caller2_end2",
"caller2_ID","caller2_SVTYPE","caller2_FILTER")
main_chroms <- c("chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7",
"chr8", "chr9", "chr10", "chr11", "chr12", "chr13", "chr14",
"chr15", "chr16", "chr17", "chr18", "chr19", "chr20", "chr21", "chr22", "chrX", "chrY")
pairtopair <- pairtopair[(pairtopair$caller1_chrom1 %in% main_chroms) &
(pairtopair$caller1_chrom2 %in% main_chroms) &
(pairtopair$caller2_chrom1 %in% main_chroms) &
(pairtopair$caller2_chrom2 %in% main_chroms),]
}
return(pairtopair)
}
SV_integration <- function(sampleID, vcf_files, bkpt_T_callers, SVCaller_names, PASS_filter, svtype_ignore,bedtools_dir){
DIR <- "./"
dir.create(paste0(DIR, sampleID))
pairtopair <- SVCaller_union_intersect_generate(sampleID, vcf_files, bkpt_T_callers, SVCaller_names, bedtools_dir, DIR)
if(length(pairtopair)==0){
caller1_bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(vcf_files[1], caller= SVCaller_names[1])
caller1_bedpe$caller2_ID <- NA
}else{
if(PASS_filter=="both" & (!svtype_ignore)){
pairtopair_filtered <- pairtopair[pairtopair$caller1_FILTER=="PASS" & pairtopair$caller2_FILTER=="PASS" &
pairtopair$caller1_SVTYPE == pairtopair$caller2_SVTYPE ,]
}else if(PASS_filter=="one"& (!svtype_ignore)){
pairtopair_filtered <- pairtopair[(pairtopair$caller1_FILTER=="PASS" | pairtopair$caller2_FILTER=="PASS") &
pairtopair$caller1_SVTYPE == pairtopair$caller2_SVTYPE,]
}else{pairtopair_filtered <- pairtopair[pairtopair$caller1_SVTYPE == pairtopair$caller2_SVTYPE,]}
caller1_bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(vcf_files[1], caller= SVCaller_names[1])
caller1_bedpe_filtered <- caller1_bedpe[caller1_bedpe$ID %in% pairtopair_filtered$caller1_ID, ]
caller1_ID <- unique(pairtopair_filtered$caller1_ID)
caller2_ID <- c()
for(i in c(1:length(unique(pairtopair_filtered$caller1_ID)))){
caller2_ID <- c(caller2_ID,
paste(pairtopair_filtered[pairtopair_filtered$caller1_ID == caller1_ID[i],]$caller2_ID, collapse = ","))
}
caller1_bedpe$caller2_ID <- NA
caller1_bedpe$caller2_ID[match(caller1_ID, caller1_bedpe$ID)] <- caller2_ID
vcf <- VariantAnnotation::readVcf(file= vcf_files[1], "hg38")
gr <- vcf@rowRanges
vcf_filtered <- vcf[gr@ranges@NAMES %in% c(caller1_bedpe_filtered$ID_caller,
caller1_bedpe_filtered$INFO_MATEID_caller[!is.na(caller1_bedpe_filtered$INFO_MATEID_caller)]),]
VariantAnnotation::writeVcf(vcf_filtered , paste0("SVUtil_",sampleID,"_",SVCaller_names[1], "_vs_",SVCaller_names[2],"_", PASS_filter,"_PASS_","sametype",".vcf"))
cat(paste0(sampleID," filtered VCF write.\n"))
}
return(caller1_bedpe)
}
Standard_bedtool_prepare_bkpt <- function(SV_data, bkpt_T_callers,caller){
caller_bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(SV_data, caller)
bedpe <- data.frame(chrom1 = caller_bedpe$chrom1,
start1 = caller_bedpe$start1-(bkpt_T_callers/2),
end1 = caller_bedpe$end1+(bkpt_T_callers/2),
chrom2 = caller_bedpe$chrom2,
start2 = caller_bedpe$start2-(bkpt_T_callers/2),
end2 = caller_bedpe$end2+(bkpt_T_callers/2),
ID = paste0(caller_bedpe$ID,";",caller_bedpe$SVTYPE,";",caller_bedpe$FILTER))
if (sum(bedpe$start1<0)!=0){bedpe[bedpe$start1<0,]$start1 <- 0}
if (sum(bedpe$start2<0)!=0){bedpe[bedpe$start2<0,]$start2 <- 0}
return(bedpe)
}
DIR <- "./"
setwd(DIR)
sampleID <- "COLO829"
######## CHECKING VCF from each caller
vcf_file <- paste0(DIR,"COLO829/delly_COLO829_VAF_1_Tcov_80_Ncov_30.sv.somatic.PASS.recode.vcf"); caller_name <- "delly"
df <- StructuralVariantUtil::vcf_to_dataframe(vcf_file)
head(df)
devtools::document()
devtools::document()
?sum
?strsplit
devtools::document()
