Sys.setenv(PATH = paste(Sys.getenv("PATH"), "/opt/homebrew/bin", sep = ":"))
#' Check the directory of bedtools
#'
#' This function check the binary of bedtools
#'
#' @param x "bedtools"
#' @return data frame
#' @export
Check_bedtools <- function(x = "bedtools"){
# check if binary is in path
cat(paste0('Checking path for ', x, '... ') );
if (Sys.which(x) == "") {
cat(paste0('FAIL\n') )
path <- Sys.getenv('PATH')
}
else {
cat(paste0('PASS\n    ', Sys.which(x), '\n') )
# return.flag <- TRUE
}
}
Sys.getenv('PATH')
Check_bedtools()
#' Check the directory of bedtools
#'
#' This function check the binary of bedtools
#'
#' @param x "bedtools"
#' @return data frame
#' @export
Check_bedtools <- function(x = "bedtools"){
# check if binary is in path
cat(paste0('Checking path for ', x, '... ') );
if (Sys.which(x) == "") {
cat(paste0('FAIL\n') )
path <- Sys.getenv('PATH')
}
else {
cat(paste0('PASS\n    ', Sys.which(x), '\n') )
}
return(Sys.which(x))
}
test <- Check_bedtools()
test
?stopifnot
Sys.getenv('PATH')
#' Check the directory of bedtools
#'
#' This function check the binary of bedtools
#'
#' @param x "bedtools"
#' @return data frame
#' @export
Check_bedtools <- function(x = "bedtools"){
# check if binary is in path
cat(paste0('Checking path for ', x, '... ') );
if (Sys.which(x) == "") {
cat(paste0('FAIL\n') )
#path <- Sys.getenv('PATH')
}
else {
cat(paste0('PASS\n    ', Sys.which(x), '\n') )
}
return(Sys.which(x))
}
test <- Check_bedtools()
Check_bedtools()
Check_bedtools()
?is.NULL
?NULL
?is.null
devtools::document()
devtools::document()
?ggplot
caller_name <- "Manta"
vcf_file <- system.file("extdata", "manta_SVEngine_TumorSV2.60x_NormalSV1.60x_0.5.T.PASS.recode.vcf", package = "StructuralVariantUtil")
results <- simple_SVTYPE_classification(vcf_file, caller_name)
bed_SVTYPE_classified <- results[[1]]
library(StructuralVariantUtil)
results <- simple_SVTYPE_classification(vcf_file, caller_name)
bed_SVTYPE_classified <- results[[1]]
head(bed_SVTYPE_classified)
SVTYPE_stat <- results[[2]]
SVTYPE_stat
vcf_list<- c(system.file("extdata", "manta_sample1.vcf", package = "StructuralVariantUtil"),
system.file("extdata", "manta_sample2.vcf", package = "StructuralVariantUtil"),
system.file("extdata", "manta_sample3.vcf", package = "StructuralVariantUtil"))
results <- Spectrum_SV_type(paste0("sample",c(1,2,3)), vcf_list = vcf_list, identify_hyperSV_tumour = TRUE)
Spectrum_SVTYPE <- results[[1]]
Spectrum_SVTYPE
Hyper_SV_sample <- results[[2]]
Hyper_SV_sample
results <- Spectrum_SV_type_plot(Spectrum_SVTYPE)
devtools::document()
devtools::document()
###Test data for CNV integration, currently use sample UP2003 in HRPCa project
SCNV <- read.table(system.file("extdata",
"UP2003-T.final.call.threshold.cns",
package = "ShinySoSV2"), header = TRUE)
###Test data for CNV integration, currently use sample UP2003 in HRPCa project
SCNV <- read.table(system.file("extdata",
"UP2003-T.final.call.threshold.cns",
package = "StructuralVariantUtil"), header = TRUE)
library(StructuralVariantUtil)
#############################################################################################################################
######################################## SV calling performance estimation ################################################
#############################################################################################################################
candidate_callers <- c("Manta","Lumpy","GRIDSS","Delly","SvABA")
set.seed(1)
newdata <- data.frame(sampleID = paste0("sample_",c(1:100)), VAF = round(rnorm(100, mean=0.5, sd=0.1),digits = 2), N_coverage = round(rnorm(100, mean=30, sd=10),digits = 2), T_coverage = round(rnorm(100, mean=60, sd=10),digits = 2), BND_threshold = 100)
head(newdata)
performance <- "F1_score"
callset <- "individual"
df_prediction <- ShinySoSV_prediction(Candidate_callers, newdata, performance, callset)
###Test data for CNV integration, currently use sample UP2003 in HRPCa project
SCNV <- read.table(system.file("extdata",
"UP2003-T.final.call.threshold.cns",
package = "StructuralVariantUtil"), header = TRUE)
CNV_bed <- SCNV[,c(1,2,3,6)]
usethis::use_data(CNV_bed, overwrite = TRUE)
bedpe <- read.table(system.file("extdata",
"UP2003_Manta_GRIDSS_intersect_both_high_confidence.bedpe",
package = "StructuralVariantUtil"), header = TRUE)
SV_bed <- bedpe[,c(1:10)]
usethis::use_data(SV_bed, overwrite = TRUE)
###Test data for Sv type composition, NOT USE, three manta VCFs used
generateRandomPos <- function(n,chr,chr.sizes,width,strand){
random_chr <- sample(x=chr,size=n,prob=chr.sizes,replace=T)
random_pos <- sapply(random_chr,function(chrTmp){sample(chr.sizes[chr==chrTmp],1)})
res <- GenomicRanges::GRanges(random_chr,IRanges::IRanges(random_pos, random_pos+width), strand = strand)
return(res)
}
All_sampleID <- paste0("sample_",c(1:100))
set.seed(1)
input_SV_count <- data.frame(sampleID = All_sampleID,
DEL = sample.int(300, 100, replace = TRUE),
DUP = sample.int(300, 100, replace = TRUE),
INS = sample.int(100, 100, replace = TRUE),
INV = sample.int(300, 100, replace = TRUE),
TRA = sample.int(300, 100, replace = TRUE))
for(i in c(1: nrow(input_SV_count))){
sample_tmp_bed <- c()
for(SVTYPE in colnames(input_SV_count)[2:ncol(input_SV_count)]){
if(SVTYPE == "TRA"){
n <- 2*input_SV_count[i, colnames(input_SV_count) == SVTYPE]
}else{
n <- input_SV_count[i, colnames(input_SV_count) == SVTYPE]
}
SV_length <-sample(c(50,100,500,1000,2000,5000,10000,15000,100000,1000000), n, replace = TRUE, prob = c(0.1,0.1,0.2,0.2,0.3,0.5,0.5,0.4,0.2,0.1))
res <- generateRandomPos(n = n, chr = c(seq(1:22),"X","Y"), chr.sizes = seq(0.2,24), width = SV_length, strand = "+")
sample_tmp_bed <- rbind(sample_tmp_bed, data.frame(chrom = paste0("chr",res@seqnames), res@ranges, strand = res@strand, SVTYPE = SVTYPE))
}
write.table(sample_tmp_bed, paste0("/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
input_SV_count$sampleID[i],"_tmp.bed"), quote=FALSE, sep='\t', row.names=FALSE, col.names=FALSE)
system(paste0("/opt/homebrew/bin/bedtools shuffle ",
"-excl /Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/hg38_gaps_centromeres_Telomeres.bed -i ",
"/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
input_SV_count$sampleID[i],"_tmp.bed ",
"-g /Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/hg38.genome ",
"> ",
"/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
"random_",input_SV_count$sampleID[i],".bed"))
random_sample.bed <- read.table(paste0("random_",input_SV_count$sampleID[i],".bed"))
colnames(random_sample.bed) <- c("chrom1","pos1","pos2","SVLEN","strand1","SVTYPE")
n_TRA <- sum(random_sample.bed$SVTYPE == "TRA")/2
n_total_tmp <- nrow(random_sample.bed)
df <- data.frame(chrom1 = random_sample.bed$chrom1[1:(n_total_tmp-n_TRA)],
pos1 = random_sample.bed$pos1[1:(n_total_tmp-n_TRA)],
chrom2 = c(random_sample.bed$chrom1[1:(n_total_tmp-2*n_TRA)], random_sample.bed$chrom1[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
pos2 = c(random_sample.bed$pos2[1:(n_total_tmp-2*n_TRA)], random_sample.bed$pos2[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
ID = paste0(c(1:(n_total_tmp-n_TRA)),"_1"),
ID_mate = paste0(c(1:(n_total_tmp-n_TRA)),"_2"),
SVTYPE = random_sample.bed$SVTYPE[1:(n_total_tmp-n_TRA)],
SVLEN = random_sample.bed$SVLEN[1:(n_total_tmp-n_TRA)],
strand = random_sample.bed$strand1[1:(n_total_tmp-n_TRA)])
assign(paste0(All_sampleID[i], "_df"), df[!(df$SVTYPE == "TRA" & (df$chrom1 == df$chrom2)),])
}
i
sample_tmp_bed <- c()
for(SVTYPE in colnames(input_SV_count)[2:ncol(input_SV_count)]){
if(SVTYPE == "TRA"){
n <- 2*input_SV_count[i, colnames(input_SV_count) == SVTYPE]
}else{
n <- input_SV_count[i, colnames(input_SV_count) == SVTYPE]
}
SV_length <-sample(c(50,100,500,1000,2000,5000,10000,15000,100000,1000000), n, replace = TRUE, prob = c(0.1,0.1,0.2,0.2,0.3,0.5,0.5,0.4,0.2,0.1))
res <- generateRandomPos(n = n, chr = c(seq(1:22),"X","Y"), chr.sizes = seq(0.2,24), width = SV_length, strand = "+")
sample_tmp_bed <- rbind(sample_tmp_bed, data.frame(chrom = paste0("chr",res@seqnames), res@ranges, strand = res@strand, SVTYPE = SVTYPE))
}
write.table(sample_tmp_bed, paste0("/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
input_SV_count$sampleID[i],"_tmp.bed"), quote=FALSE, sep='\t', row.names=FALSE, col.names=FALSE)
system(paste0("/opt/homebrew/bin/bedtools shuffle ",
"-excl /Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/hg38_gaps_centromeres_Telomeres.bed -i ",
"/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
input_SV_count$sampleID[i],"_tmp.bed ",
"-g /Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/hg38.genome ",
"> ",
"/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
"random_",input_SV_count$sampleID[i],".bed"))
random_sample.bed <- read.table(paste0("random_",input_SV_count$sampleID[i],".bed"))
random_sample.bed <- read.table(paste0("/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/","random_",input_SV_count$sampleID[i],".bed"))
colnames(random_sample.bed) <- c("chrom1","pos1","pos2","SVLEN","strand1","SVTYPE")
n_TRA <- sum(random_sample.bed$SVTYPE == "TRA")/2
n_total_tmp <- nrow(random_sample.bed)
df <- data.frame(chrom1 = random_sample.bed$chrom1[1:(n_total_tmp-n_TRA)],
pos1 = random_sample.bed$pos1[1:(n_total_tmp-n_TRA)],
chrom2 = c(random_sample.bed$chrom1[1:(n_total_tmp-2*n_TRA)], random_sample.bed$chrom1[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
pos2 = c(random_sample.bed$pos2[1:(n_total_tmp-2*n_TRA)], random_sample.bed$pos2[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
ID = paste0(c(1:(n_total_tmp-n_TRA)),"_1"),
ID_mate = paste0(c(1:(n_total_tmp-n_TRA)),"_2"),
SVTYPE = random_sample.bed$SVTYPE[1:(n_total_tmp-n_TRA)],
SVLEN = random_sample.bed$SVLEN[1:(n_total_tmp-n_TRA)],
strand = random_sample.bed$strand1[1:(n_total_tmp-n_TRA)])
assign(paste0(All_sampleID[i], "_df"), df[!(df$SVTYPE == "TRA" & (df$chrom1 == df$chrom2)),])
All_sampleID <- paste0("sample_",c(1:100))
set.seed(1)
input_SV_count <- data.frame(sampleID = All_sampleID,
DEL = sample.int(300, 100, replace = TRUE),
DUP = sample.int(300, 100, replace = TRUE),
INS = sample.int(100, 100, replace = TRUE),
INV = sample.int(300, 100, replace = TRUE),
TRA = sample.int(300, 100, replace = TRUE))
for(i in c(1: nrow(input_SV_count))){
sample_tmp_bed <- c()
for(SVTYPE in colnames(input_SV_count)[2:ncol(input_SV_count)]){
if(SVTYPE == "TRA"){
n <- 2*input_SV_count[i, colnames(input_SV_count) == SVTYPE]
}else{
n <- input_SV_count[i, colnames(input_SV_count) == SVTYPE]
}
SV_length <-sample(c(50,100,500,1000,2000,5000,10000,15000,100000,1000000), n, replace = TRUE, prob = c(0.1,0.1,0.2,0.2,0.3,0.5,0.5,0.4,0.2,0.1))
res <- generateRandomPos(n = n, chr = c(seq(1:22),"X","Y"), chr.sizes = seq(0.2,24), width = SV_length, strand = "+")
sample_tmp_bed <- rbind(sample_tmp_bed, data.frame(chrom = paste0("chr",res@seqnames), res@ranges, strand = res@strand, SVTYPE = SVTYPE))
}
write.table(sample_tmp_bed, paste0("/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
input_SV_count$sampleID[i],"_tmp.bed"), quote=FALSE, sep='\t', row.names=FALSE, col.names=FALSE)
system(paste0("/opt/homebrew/bin/bedtools shuffle ",
"-excl /Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/hg38_gaps_centromeres_Telomeres.bed -i ",
"/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
input_SV_count$sampleID[i],"_tmp.bed ",
"-g /Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/hg38.genome ",
"> ",
"/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
"random_",input_SV_count$sampleID[i],".bed"))
random_sample.bed <- read.table(paste0("/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/","random_",input_SV_count$sampleID[i],".bed"))
colnames(random_sample.bed) <- c("chrom1","pos1","pos2","SVLEN","strand1","SVTYPE")
n_TRA <- sum(random_sample.bed$SVTYPE == "TRA")/2
n_total_tmp <- nrow(random_sample.bed)
df <- data.frame(chrom1 = random_sample.bed$chrom1[1:(n_total_tmp-n_TRA)],
pos1 = random_sample.bed$pos1[1:(n_total_tmp-n_TRA)],
chrom2 = c(random_sample.bed$chrom1[1:(n_total_tmp-2*n_TRA)], random_sample.bed$chrom1[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
pos2 = c(random_sample.bed$pos2[1:(n_total_tmp-2*n_TRA)], random_sample.bed$pos2[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
ID = paste0(c(1:(n_total_tmp-n_TRA)),"_1"),
ID_mate = paste0(c(1:(n_total_tmp-n_TRA)),"_2"),
SVTYPE = random_sample.bed$SVTYPE[1:(n_total_tmp-n_TRA)],
SVLEN = random_sample.bed$SVLEN[1:(n_total_tmp-n_TRA)],
strand = random_sample.bed$strand1[1:(n_total_tmp-n_TRA)])
assign(paste0(All_sampleID[i], "_df"), df[!(df$SVTYPE == "TRA" & (df$chrom1 == df$chrom2)),])
}
#save(list = paste0(All_sampleID, "_df"), file = "./input_SV_bed.RData")
do.call(usethis::use_data, c(lapply(paste0(All_sampleID, "_df"), as.name),overwrite = TRUE))
list <- do.call(list, lapply(paste0(All_sampleID, "_df"), as.name))
list <- setNames(list, paste0(All_sampleID, "_df"))
usethis::use_data(list, overwrite = TRUE)
View(random_sample.bed)
View(df)
vcf_file <- "manta_SVEngine_TumorSV2.60x_NormalSV1.60x_0.5.T.PASS.recode.vcf"
bed <- vcf_to_bed(vcf_file)
bed <- vcf_to_dataframe(vcf_file)
vcf_to_dataframe <- function(vcf_file){
vcf <- VariantAnnotation::readVcf(vcf_file)
fixed_df <- vcf@fixed
gr <- vcf@rowRanges
info <- vcf@info
for(field in c("SVTYPE","SVLEN","END", "STRANDS","CT","INV5","INV3","MATEID")){
tmp <- eval(parse(text=paste0("info$", field)))
if (length(tmp) == 0){
assign(paste0("INFO_", field), NA)
}else{
idx <- !(sapply(tmp, length))
tmp[idx] <- NA
if(field == "STRANDS"){
assign(paste0("INFO_", field), sapply(tmp, paste, collapse = ","))
}else{
assign(paste0("INFO_", field), unlist(tmp))
}
}
}
bed <- data.frame(CHROM = gr@seqnames,
POS = gr@ranges@start,
ID_caller = gr@ranges@NAMES,
REF = as.character(fixed_df$REF),
ALT = data.frame(fixed_df$ALT)$value,
QUAL = fixed_df$QUAL,
FILTER = fixed_df$FILTER,
INFO_END,
INFO_SVTYPE,
INFO_SVLEN,
INFO_STRANDS,
INFO_CT = INFO_CT,
INFO_INV5 = INFO_INV5,
INFO_INV3 = INFO_INV3,
INFO_MATEID_caller = INFO_MATEID,
stringsAsFactors = FALSE
)
return(bed)
}
bed <- vcf_to_dataframe(vcf_file)
vcf_file <- system.file("extdata",
"manta_SVEngine_TumorSV2.60x_NormalSV1.60x_0.5.T.PASS.recode.vcf",
package = "ShinySoSV2")
bed <- vcf_to_dataframe(vcf_file)
View(bed)
View(df)
df <- df[!(df$SVTYPE == "TRA" & (df$chrom1 == df$chrom2)),]
DNA = c ("A", "T", "C", "G")
DNA_probabilities = c(0.2, 0.2, 0.2, 0.4)
sample(DNA,
10,
replace=TRUE,
prob=DNA_probabilities)
1/4
df_in <- c()
set.seed(1000)
df_in$CHROM <- df$chrom1
paste0(REF,"[",df$chrom2,":",df$pos2,"[")
REF = sample(c ("A", "T", "C", "G") ,
nrow(df),
replace=TRUE,
prob=c(0.25, 0.25, 0.25, 0.25))
paste0(REF,"[",df$chrom2,":",df$pos2,"[")
?sample
df <- data.frame(chrom1 = random_sample.bed$chrom1[1:(n_total_tmp-n_TRA)],
pos1 = random_sample.bed$pos1[1:(n_total_tmp-n_TRA)],
chrom2 = c(random_sample.bed$chrom1[1:(n_total_tmp-2*n_TRA)], random_sample.bed$chrom1[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
pos2 = c(random_sample.bed$pos2[1:(n_total_tmp-2*n_TRA)], random_sample.bed$pos2[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
ID = paste0(c(1:(n_total_tmp-n_TRA)),"_1"),
ID_mate = paste0(c(1:(n_total_tmp-n_TRA)),"_2"),
SVTYPE = random_sample.bed$SVTYPE[1:(n_total_tmp-n_TRA)],
SVLEN = random_sample.bed$SVLEN[1:(n_total_tmp-n_TRA)],
strand = random_sample.bed$strand1[1:(n_total_tmp-n_TRA)])
df <- df[!(df$SVTYPE == "TRA" & (df$chrom1 == df$chrom2)),]
#assign(paste0(All_sampleID[i], "_df"), df)
df$CHROM = df$chrom1
df$POS = df$pos1
set.seed(1000)
df$REF = sample(c ("A", "T", "C", "G") ,
nrow(df),
replace=TRUE,
prob=c(0.25, 0.25, 0.25, 0.25))
df$ALT <- paste0(df$REF,"[",df$chrom2,":",df$pos2,"[")
df$INFO_SVTYPE <- df$SVTYPE
assign(paste0(All_sampleID[i], "_df"), df[,c(10:14)])
i
View(sample_100_df)
df$ALT[df$SVTYPE %in% c("DEL","TRA")]
df$ALT[df$SVTYPE =="DUP"] <- paste0("]",df$chrom2[df$SVTYPE =="DUP"],":",df$pos2[df$SVTYPE =="DUP"],"]",df$REF[df$SVTYPE =="DUP"])
View(df)
df$ALT[df$SVTYPE =="INV"] <- paste0(df$REF[df$SVTYPE =="INV"],"]",df$chrom2[df$SVTYPE =="INV"],":",df$pos2[df$SVTYPE =="INV"],"]")
df <- data.frame(chrom1 = random_sample.bed$chrom1[1:(n_total_tmp-n_TRA)],
pos1 = random_sample.bed$pos1[1:(n_total_tmp-n_TRA)],
chrom2 = c(random_sample.bed$chrom1[1:(n_total_tmp-2*n_TRA)], random_sample.bed$chrom1[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
pos2 = c(random_sample.bed$pos2[1:(n_total_tmp-2*n_TRA)], random_sample.bed$pos2[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
ID = paste0(c(1:(n_total_tmp-n_TRA)),"_1"),
ID_mate = paste0(c(1:(n_total_tmp-n_TRA)),"_2"),
SVTYPE = random_sample.bed$SVTYPE[1:(n_total_tmp-n_TRA)],
SVLEN = random_sample.bed$SVLEN[1:(n_total_tmp-n_TRA)],
strand = random_sample.bed$strand1[1:(n_total_tmp-n_TRA)])
df <- df[!(df$SVTYPE == "TRA" & (df$chrom1 == df$chrom2)),]
#assign(paste0(All_sampleID[i], "_df"), df)
df$CHROM = df$chrom1
df$POS = df$pos1
set.seed(1000)
df$REF = sample(c ("A", "T", "C", "G") ,
nrow(df),
replace=TRUE,
prob=c(0.25, 0.25, 0.25, 0.25))
df$ALT <- paste0(df$REF,"[",df$chrom2,":",df$pos2,"[")
df$ALT[df$SVTYPE =="DUP"] <- paste0("]",df$chrom2[df$SVTYPE =="DUP"],":",df$pos2[df$SVTYPE =="DUP"],"]",df$REF[df$SVTYPE =="DUP"])
df$ALT[df$SVTYPE =="INV"] <- paste0(df$REF[df$SVTYPE =="INV"],"]",df$chrom2[df$SVTYPE =="INV"],":",df$pos2[df$SVTYPE =="INV"],"]")
df$INFO_SVTYPE <- df$SVTYPE
assign(paste0(All_sampleID[i], "_df"), df[,c(10:14)])
All_sampleID <- paste0("sample_",c(1:100))
set.seed(1)
input_SV_count <- data.frame(sampleID = All_sampleID,
DEL = sample.int(300, 100, replace = TRUE),
DUP = sample.int(300, 100, replace = TRUE),
INS = sample.int(100, 100, replace = TRUE),
INV = sample.int(300, 100, replace = TRUE),
TRA = sample.int(300, 100, replace = TRUE))
for(i in c(1: nrow(input_SV_count))){
sample_tmp_bed <- c()
for(SVTYPE in colnames(input_SV_count)[2:ncol(input_SV_count)]){
if(SVTYPE == "TRA"){
n <- 2*input_SV_count[i, colnames(input_SV_count) == SVTYPE]
}else{
n <- input_SV_count[i, colnames(input_SV_count) == SVTYPE]
}
SV_length <-sample(c(50,100,500,1000,2000,5000,10000,15000,100000,1000000), n, replace = TRUE, prob = c(0.1,0.1,0.2,0.2,0.3,0.5,0.5,0.4,0.2,0.1))
res <- generateRandomPos(n = n, chr = c(seq(1:22),"X","Y"), chr.sizes = seq(0.2,24), width = SV_length, strand = "+")
sample_tmp_bed <- rbind(sample_tmp_bed, data.frame(chrom = paste0("chr",res@seqnames), res@ranges, strand = res@strand, SVTYPE = SVTYPE))
}
write.table(sample_tmp_bed, paste0("/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
input_SV_count$sampleID[i],"_tmp.bed"), quote=FALSE, sep='\t', row.names=FALSE, col.names=FALSE)
system(paste0("/opt/homebrew/bin/bedtools shuffle ",
"-excl /Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/hg38_gaps_centromeres_Telomeres.bed -i ",
"/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
input_SV_count$sampleID[i],"_tmp.bed ",
"-g /Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/hg38.genome ",
"> ",
"/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
"random_",input_SV_count$sampleID[i],".bed"))
random_sample.bed <- read.table(paste0("/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/","random_",input_SV_count$sampleID[i],".bed"))
colnames(random_sample.bed) <- c("chrom1","pos1","pos2","SVLEN","strand1","SVTYPE")
n_TRA <- sum(random_sample.bed$SVTYPE == "TRA")/2
n_total_tmp <- nrow(random_sample.bed)
df <- data.frame(chrom1 = random_sample.bed$chrom1[1:(n_total_tmp-n_TRA)],
pos1 = random_sample.bed$pos1[1:(n_total_tmp-n_TRA)],
chrom2 = c(random_sample.bed$chrom1[1:(n_total_tmp-2*n_TRA)], random_sample.bed$chrom1[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
pos2 = c(random_sample.bed$pos2[1:(n_total_tmp-2*n_TRA)], random_sample.bed$pos2[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
ID = paste0(c(1:(n_total_tmp-n_TRA)),"_1"),
ID_mate = paste0(c(1:(n_total_tmp-n_TRA)),"_2"),
SVTYPE = random_sample.bed$SVTYPE[1:(n_total_tmp-n_TRA)],
SVLEN = random_sample.bed$SVLEN[1:(n_total_tmp-n_TRA)],
strand = random_sample.bed$strand1[1:(n_total_tmp-n_TRA)])
df <- df[!(df$SVTYPE == "TRA" & (df$chrom1 == df$chrom2)),]
#assign(paste0(All_sampleID[i], "_df"), df)
df$CHROM = df$chrom1
df$POS = df$pos1
set.seed(1000)
df$REF = sample(c ("A", "T", "C", "G") ,
nrow(df),
replace=TRUE,
prob=c(0.25, 0.25, 0.25, 0.25))
df$ALT <- paste0(df$REF,"[",df$chrom2,":",df$pos2,"[")
df$ALT[df$SVTYPE =="DUP"] <- paste0("]",df$chrom2[df$SVTYPE =="DUP"],":",df$pos2[df$SVTYPE =="DUP"],"]",df$REF[df$SVTYPE =="DUP"])
df$ALT[df$SVTYPE =="INV"] <- paste0(df$REF[df$SVTYPE =="INV"],"]",df$chrom2[df$SVTYPE =="INV"],":",df$pos2[df$SVTYPE =="INV"],"]")
df$INFO_SVTYPE <- df$SVTYPE
assign(paste0(All_sampleID[i], "_df"), df[,c(10:14)])
}
list <- setNames(list, paste0(All_sampleID, "_df"))
usethis::use_data(list, overwrite = TRUE)
devtools::document()
random_pos <- sapply(random_chr,function(chrTmp){sample(chr.sizes[chr==chrTmp],1)})
###Test data for Sv type composition, NOT USE, three manta VCFs used
generateRandomPos <- function(n,chr,chr.sizes,width,strand){
random_chr <- sample(x=chr,size=n,prob=chr.sizes,replace=T)
random_pos <- sapply(random_chr,function(chrTmp){sample(chr.sizes[chr==chrTmp],1)})
res <- GenomicRanges::GRanges(random_chr,IRanges::IRanges(random_pos, random_pos+width), strand = strand)
return(res)
}
All_sampleID <- paste0("sample_",c(1:100))
set.seed(1)
input_SV_count <- data.frame(sampleID = All_sampleID,
DEL = sample.int(300, 100, replace = TRUE),
DUP = sample.int(300, 100, replace = TRUE),
INS = sample.int(100, 100, replace = TRUE),
INV = sample.int(300, 100, replace = TRUE),
TRA = sample.int(300, 100, replace = TRUE))
for(i in c(1: nrow(input_SV_count))){
sample_tmp_bed <- c()
for(SVTYPE in colnames(input_SV_count)[2:ncol(input_SV_count)]){
if(SVTYPE == "TRA"){
n <- 2*input_SV_count[i, colnames(input_SV_count) == SVTYPE]
}else{
n <- input_SV_count[i, colnames(input_SV_count) == SVTYPE]
}
SV_length <-sample(c(50,100,500,1000,2000,5000,10000,15000,100000,1000000), n, replace = TRUE, prob = c(0.1,0.1,0.2,0.2,0.3,0.5,0.5,0.4,0.2,0.1))
res <- generateRandomPos(n = n, chr = c(seq(1:22),"X","Y"), chr.sizes = seq(0.2,24), width = SV_length, strand = "+")
sample_tmp_bed <- rbind(sample_tmp_bed, data.frame(chrom = paste0("chr",res@seqnames), res@ranges, strand = res@strand, SVTYPE = SVTYPE))
}
write.table(sample_tmp_bed, paste0("/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
input_SV_count$sampleID[i],"_tmp.bed"), quote=FALSE, sep='\t', row.names=FALSE, col.names=FALSE)
system(paste0("/opt/homebrew/bin/bedtools shuffle ",
"-excl /Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/hg38_gaps_centromeres_Telomeres.bed -i ",
"/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
input_SV_count$sampleID[i],"_tmp.bed ",
"-g /Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/hg38.genome ",
"> ",
"/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/",
"random_",input_SV_count$sampleID[i],".bed"))
random_sample.bed <- read.table(paste0("/Users/tingtinggong/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script/","random_",input_SV_count$sampleID[i],".bed"))
colnames(random_sample.bed) <- c("chrom1","pos1","pos2","SVLEN","strand1","SVTYPE")
n_TRA <- sum(random_sample.bed$SVTYPE == "TRA")/2
n_total_tmp <- nrow(random_sample.bed)
df <- data.frame(chrom1 = random_sample.bed$chrom1[1:(n_total_tmp-n_TRA)],
pos1 = random_sample.bed$pos1[1:(n_total_tmp-n_TRA)],
chrom2 = c(random_sample.bed$chrom1[1:(n_total_tmp-2*n_TRA)], random_sample.bed$chrom1[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
pos2 = c(random_sample.bed$pos2[1:(n_total_tmp-2*n_TRA)], random_sample.bed$pos2[(n_total_tmp-n_TRA+1):(n_total_tmp)]),
ID = paste0(c(1:(n_total_tmp-n_TRA)),"_1"),
ID_mate = paste0(c(1:(n_total_tmp-n_TRA)),"_2"),
SVTYPE = random_sample.bed$SVTYPE[1:(n_total_tmp-n_TRA)],
SVLEN = random_sample.bed$SVLEN[1:(n_total_tmp-n_TRA)],
strand = random_sample.bed$strand1[1:(n_total_tmp-n_TRA)])
df <- df[!(df$SVTYPE == "TRA" & (df$chrom1 == df$chrom2)),]
#assign(paste0(All_sampleID[i], "_df"), df)
df$CHROM = df$chrom1
df$POS = df$pos1
set.seed(1000)
df$REF = sample(c ("A", "T", "C", "G") ,
nrow(df),
replace=TRUE,
prob=c(0.25, 0.25, 0.25, 0.25))
df$ALT <- paste0(df$REF,"[",df$chrom2,":",df$pos2,"[")
df$ALT[df$SVTYPE =="DUP"] <- paste0("]",df$chrom2[df$SVTYPE =="DUP"],":",df$pos2[df$SVTYPE =="DUP"],"]",df$REF[df$SVTYPE =="DUP"])
df$ALT[df$SVTYPE =="INV"] <- paste0(df$REF[df$SVTYPE =="INV"],"]",df$chrom2[df$SVTYPE =="INV"],":",df$pos2[df$SVTYPE =="INV"],"]")
df$INFO_SVTYPE <- df$SVTYPE
assign(paste0(All_sampleID[i], "_df"), df[,c(10:14)])
}
#save(list = paste0(All_sampleID, "_df"), file = "./input_SV_bed.RData")
#do.call(usethis::use_data, c(lapply(paste0(All_sampleID, "_df"), as.name),overwrite = TRUE))
list <- do.call(list, lapply(paste0(All_sampleID, "_df"), as.name))
usethis::use_data(list, overwrite = TRUE)
