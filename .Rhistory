pairtopair <- cbind(pairtopair[,c(1:6)],
stringr::str_split_fixed(pairtopair[,7],";",3)[,1],
stringr::str_split_fixed(pairtopair[,7],";",3)[,2],
stringr::str_split_fixed(pairtopair[,7],";",3)[,3],
pairtopair[,c(8:13)],
stringr::str_split_fixed(pairtopair[,14],";",3)[,1],
stringr::str_split_fixed(pairtopair[,14],";",3)[,2],
stringr::str_split_fixed(pairtopair[,14],";",3)[,3])
colnames(pairtopair) <- c("caller1_chrom1","caller1_start1","caller1_end1",
"caller1_chrom2","caller1_start2","caller1_end2",
"caller1_ID","caller1_SVTYPE","caller1_FILTER",
"caller2_chrom1","caller2_start1","caller2_end1",
"caller2_chrom2","caller2_start2","caller2_end2",
"caller2_ID","caller2_SVTYPE","caller2_FILTER")
main_chroms <- c("chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7",
"chr8", "chr9", "chr10", "chr11", "chr12", "chr13", "chr14",
"chr15", "chr16", "chr17", "chr18", "chr19", "chr20", "chr21", "chr22", "chrX", "chrY")
pairtopair <- pairtopair[(pairtopair$caller1_chrom1 %in% main_chroms) &
(pairtopair$caller1_chrom2 %in% main_chroms) &
(pairtopair$caller2_chrom1 %in% main_chroms) &
(pairtopair$caller2_chrom2 %in% main_chroms),]
DIR <- "./"
dir.create(paste0(DIR, sampleID))
pairtopair <- SVCaller_union_intersect_generate(sampleID, vcf_files, bkpt_T_callers, SVCaller_names, bedtools_dir, DIR)
PASS_filter <- "both"
svtype_ignore <- FALSE
if(PASS_filter=="both" & (!svtype_ignore)){
bed_filtered <- pairtopair[pairtopair$caller1_FILTER=="PASS" & pairtopair$caller2_FILTER=="PASS" &
pairtopair$caller1_SVTYPE == pairtopair$caller2_SVTYPE ,]
}else if(PASS_filter=="one"& (!svtype_ignore)){
bed_filtered <- pairtopair[(pairtopair$caller1_FILTER=="PASS" | pairtopair$caller2_FILTER=="PASS") &
pairtopair$caller1_SVTYPE == pairtopair$caller2_SVTYPE,]
}else{bed_filtered <- pairtopair[pairtopair$caller1_SVTYPE == pairtopair$caller2_SVTYPE,]}
View(bed_filtered)
caller1_bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(vcf_files[1], caller= SVCaller_names[1])
caller1_bedpe_filtered <- caller1_bedpe[caller1_bedpe$ID %in% bed_filtered$caller1_ID, ]
View(caller1_bedpe_filtered)
library(StructuralVariantUtil)
SVCaller_union_intersect_generate <- function(sampleID, vcf_files, bkpt_T_callers, SVCaller_names, bedtools_dir, DIR){
bedpe <- Standard_bedtool_prepare_bkpt(vcf_files[1], bkpt_T_callers, caller = SVCaller_names[1])
write.table(bedpe, paste0(DIR, sampleID, "/",SVCaller_names[1],"_sv.bedpe"), quote=FALSE, sep='\t', row.names=FALSE, col.names=FALSE)
bedpe <- Standard_bedtool_prepare_bkpt(vcf_files[2], bkpt_T_callers, caller = SVCaller_names[2])
write.table(bedpe, paste0(DIR, sampleID, "/",SVCaller_names[2],"_sv.bedpe"), quote=FALSE, sep='\t', row.names=FALSE, col.names=FALSE)
cat(paste(sampleID, SVCaller_names[1], "and", SVCaller_names[2],"bedpe write.\n"))
system(paste(bedtools_dir,"pairtopair -a", paste0(DIR, sampleID, "/",SVCaller_names[1],"_sv.bedpe"),
"-b", paste0(DIR, sampleID, "/",SVCaller_names[2],"_sv.bedpe"), ">",
paste0(DIR, sampleID, "/",SVCaller_names[1],"_vs_",SVCaller_names[2],"_sv.bedpe")))
if(file.info(paste0(DIR, sampleID, "/",SVCaller_names[1],"_vs_",SVCaller_names[2],"_sv.bedpe"))$size==0){
pairtopair <- c()
}else{
pairtopair <- read.table(paste0(DIR, sampleID, "/",SVCaller_names[1],"_vs_",SVCaller_names[2],"_sv.bedpe"), header =FALSE, sep="\t",stringsAsFactors=FALSE, quote="")
pairtopair <- cbind(pairtopair[,c(1:6)],
stringr::str_split_fixed(pairtopair[,7],";",3)[,1],
stringr::str_split_fixed(pairtopair[,7],";",3)[,2],
stringr::str_split_fixed(pairtopair[,7],";",3)[,3],
pairtopair[,c(8:13)],
stringr::str_split_fixed(pairtopair[,14],";",3)[,1],
stringr::str_split_fixed(pairtopair[,14],";",3)[,2],
stringr::str_split_fixed(pairtopair[,14],";",3)[,3])
colnames(pairtopair) <- c("caller1_chrom1","caller1_start1","caller1_end1",
"caller1_chrom2","caller1_start2","caller1_end2",
"caller1_ID","caller1_SVTYPE","caller1_FILTER",
"caller2_chrom1","caller2_start1","caller2_end1",
"caller2_chrom2","caller2_start2","caller2_end2",
"caller2_ID","caller2_SVTYPE","caller2_FILTER")
main_chroms <- c("chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7",
"chr8", "chr9", "chr10", "chr11", "chr12", "chr13", "chr14",
"chr15", "chr16", "chr17", "chr18", "chr19", "chr20", "chr21", "chr22", "chrX", "chrY")
pairtopair <- pairtopair[(pairtopair$caller1_chrom1 %in% main_chroms) &
(pairtopair$caller1_chrom2 %in% main_chroms) &
(pairtopair$caller2_chrom1 %in% main_chroms) &
(pairtopair$caller2_chrom2 %in% main_chroms),]
}
return(pairtopair)
}
SV_integration <- function(sampleID, vcf_files, bkpt_T_callers, SVCaller_names, PASS_filter, svtype_ignore,bedtools_dir){
DIR <- "./"
dir.create(paste0(DIR, sampleID))
pairtopair <- SVCaller_union_intersect_generate(sampleID, vcf_files, bkpt_T_callers, SVCaller_names, bedtools_dir, DIR)
if(length(pairtopair)==0){
caller1_bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(vcf_files[1], caller= SVCaller_names[1])
caller1_bedpe$caller2_ID <- NA
}else{
if(PASS_filter=="both" & (!svtype_ignore)){
pairtopair_filtered <- pairtopair[pairtopair$caller1_FILTER=="PASS" & pairtopair$caller2_FILTER=="PASS" &
pairtopair$caller1_SVTYPE == pairtopair$caller2_SVTYPE ,]
}else if(PASS_filter=="one"& (!svtype_ignore)){
pairtopair_filtered <- pairtopair[(pairtopair$caller1_FILTER=="PASS" | pairtopair$caller2_FILTER=="PASS") &
pairtopair$caller1_SVTYPE == pairtopair$caller2_SVTYPE,]
}else{pairtopair_filtered <- pairtopair[pairtopair$caller1_SVTYPE == pairtopair$caller2_SVTYPE,]}
caller1_bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(vcf_files[1], caller= SVCaller_names[1])
caller1_bedpe_filtered <- caller1_bedpe[caller1_bedpe$ID %in% pairtopair_filtered$caller1_ID, ]
caller1_ID <- unique(pairtopair_filtered$caller1_ID)
caller2_ID <- c()
for(i in c(1:length(unique(pairtopair_filtered$caller1_ID)))){
caller2_ID <- c(caller2_ID,
paste(pairtopair_filtered[pairtopair_filtered$caller1_ID == caller1_ID[i],]$caller2_ID, collapse = ","))
}
caller1_bedpe$caller2_ID <- NA
caller1_bedpe$caller2_ID[match(caller1_ID, caller1_bedpe$ID)] <- caller2_ID
vcf <- VariantAnnotation::readVcf(file= vcf_files[1], "hg38")
gr <- vcf@rowRanges
vcf_filtered <- vcf[gr@ranges@NAMES %in% c(caller1_bedpe_filtered$ID_caller,
caller1_bedpe_filtered$INFO_MATEID_caller[!is.na(caller1_bedpe_filtered$INFO_MATEID_caller)]),]
VariantAnnotation::writeVcf(vcf_filtered , paste0("SVUtil_",sampleID,"_",SVCaller_names[1], "_vs_",SVCaller_names[2],"_", PASS_filter,"_PASS_","sametype",".vcf"))
cat(paste0(sampleID," filtered VCF write.\n"))
}
return(caller1_bedpe)
}
Standard_bedtool_prepare_bkpt <- function(SV_data, bkpt_T_callers,caller){
caller_bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(SV_data, caller)
bedpe <- data.frame(chrom1 = caller_bedpe$chrom1,
start1 = caller_bedpe$start1-(bkpt_T_callers/2),
end1 = caller_bedpe$end1+(bkpt_T_callers/2),
chrom2 = caller_bedpe$chrom2,
start2 = caller_bedpe$start2-(bkpt_T_callers/2),
end2 = caller_bedpe$end2+(bkpt_T_callers/2),
ID = paste0(caller_bedpe$ID,";",caller_bedpe$SVTYPE,";",caller_bedpe$FILTER))
if (sum(bedpe$start1<0)!=0){bedpe[bedpe$start1<0,]$start1 <- 0}
if (sum(bedpe$start2<0)!=0){bedpe[bedpe$start2<0,]$start2 <- 0}
return(bedpe)
}
DIR <- "./"
setwd(DIR)
sampleID <- "COLO829"
######## Comparing to truth
vcf_files <- c(paste0(DIR,"COLO829/delly_COLO829_VAF_1_Tcov_80_Ncov_30.sv.somatic.PASS.recode.vcf"),
paste0(DIR, "COLO829/truthset_somaticSVs_COLO829.vcf")); SVCaller_names <- c("delly","truth")
bkpt_T_callers <- 100
bedtools_dir = "/opt/homebrew/bin/bedtools"
PASS_filter <- "both"
svtype_ignore <- FALSE
start_time <- Sys.time()
caller1_bedpe <- SV_integration(sampleID, vcf_files, bkpt_T_callers, SVCaller_names, PASS_filter="both", svtype_ignore=FALSE, bedtools_dir)
DIR="/Users/tingtinggong/Desktop/Fudan_University/Lung_cancer_project/Evaluation/"
setwd(DIR)
######## Comparing to truth
vcf_files <- c(paste0(DIR,"COLO829/delly_COLO829_VAF_1_Tcov_80_Ncov_30.sv.somatic.PASS.recode.vcf"),
paste0(DIR, "COLO829/truthset_somaticSVs_COLO829.vcf")); SVCaller_names <- c("delly","truth")
bkpt_T_callers <- 100
bedtools_dir = "/opt/homebrew/bin/bedtools"
PASS_filter <- "both"
svtype_ignore <- FALSE
start_time <- Sys.time()
caller1_bedpe <- SV_integration(sampleID, vcf_files, bkpt_T_callers, SVCaller_names, PASS_filter="both", svtype_ignore=FALSE, bedtools_dir)
end_time <- Sys.time()
cat(paste(sampleID,SVCaller_names[1], "and", SVCaller_names[2], "intersection VCF write ", end_time, " Time spent: ", end_time - start_time, "\n"))
caller1_bedpe_intersection <- caller1_bedpe[!is.na(caller1_bedpe$caller2_ID),]
nrow(caller1_bedpe_intersection)
vcf_files <- c(paste0(DIR,"COLO829/gridss_COLO829_VAF_1_Tcov_80_Ncov_30.sv.somatic.vcf"),
paste0(DIR, "COLO829/truthset_somaticSVs_COLO829.vcf")); SVCaller_names <- c("gridss","truth")
bkpt_T_callers <- 100
bedtools_dir = "/opt/homebrew/bin/bedtools"
PASS_filter <- "both"
svtype_ignore <- FALSE
start_time <- Sys.time()
caller1_bedpe <- SV_integration(sampleID, vcf_files, bkpt_T_callers, SVCaller_names, PASS_filter="both", svtype_ignore=FALSE, bedtools_dir)
end_time <- Sys.time()
cat(paste(sampleID,SVCaller_names[1], "and", SVCaller_names[2], "intersection VCF write ", end_time, " Time spent: ", end_time - start_time, "\n"))
caller1_bedpe_intersection <- caller1_bedpe[!is.na(caller1_bedpe$caller2_ID),]
nrow(caller1_bedpe_intersection)
######## CHECKING VCF from each caller
vcf_file <- paste0(DIR,"COLO829/delly_COLO829_VAF_1_Tcov_80_Ncov_30.sv.somatic.PASS.recode.vcf"); caller_name <- "delly"
df <- StructuralVariantUtil::vcf_to_dataframe(vcf_file)
head(df)
table(df$INFO_SVTYPE)
bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(vcf_file,caller_name)
table(bedpe$SVTYPE)
View(bedpe)
#vcf_files <- c("all",
#               paste0(DIR, "COLO829/truthset_somaticSVs_COLO829.vcf"))
#SVCaller_names <- c("all","truth")
#caller1_bedpe <- SV_integration(sampleID, vcf_files, bkpt_T_callers, SVCaller_names, PASS_filter="both", svtype_ignore=FALSE, bedtools_dir)
vcf_files <- c(paste0(DIR,"COLO829/delly_COLO829_VAF_1_Tcov_80_Ncov_30.sv.somatic.PASS.recode.vcf"),
paste0(DIR, "COLO829/truthset_somaticSVs_COLO829.vcf")); SVCaller_names <- c("delly","truth")
df_SV <- rbind(StructuralVariantUtil::vcf_to_dataframe(vcf_files[1]),
StructuralVariantUtil::vcf_to_dataframe(vcf_files[2]))
for(i in c(1:length(vcf_files))){
vcf_files_tmp <- c("all",vcf_files[i])
SVCaller_names_tmp <- c("all", SVCaller_names[i])
caller1_bedpe_tmp <- SV_integration(sampleID, df_SV, vcf_files_tmp, bkpt_T_callers, SVCaller_names_tmp, PASS_filter, svtype_ignore,bedtools_dir)
if(i == 1){
caller1_bedpe <- caller1_bedpe_tmp
}else{
caller1_bedpe <- cbind(caller1_bedpe, caller1_bedpe_tmp[,24])
colnames(caller1_bedpe)[ncol(caller1_bedpe)] <- paste0(SVCaller_names[i],"_ID")
}
}
library(StructuralVariantUtil)
SVCaller_union_intersect_generate <- function(sampleID, vcf_files, bkpt_T_callers, SVCaller_names, bedtools_dir, DIR){
bedpe <- Standard_bedtool_prepare_bkpt(vcf_files[1], bkpt_T_callers, caller = SVCaller_names[1])
write.table(bedpe, paste0(DIR, sampleID, "/",SVCaller_names[1],"_sv.bedpe"), quote=FALSE, sep='\t', row.names=FALSE, col.names=FALSE)
bedpe <- Standard_bedtool_prepare_bkpt(vcf_files[2], bkpt_T_callers, caller = SVCaller_names[2])
write.table(bedpe, paste0(DIR, sampleID, "/",SVCaller_names[2],"_sv.bedpe"), quote=FALSE, sep='\t', row.names=FALSE, col.names=FALSE)
cat(paste(sampleID, SVCaller_names[1], "and", SVCaller_names[2],"bedpe write.\n"))
system(paste(bedtools_dir,"pairtopair -a", paste0(DIR, sampleID, "/",SVCaller_names[1],"_sv.bedpe"),
"-b", paste0(DIR, sampleID, "/",SVCaller_names[2],"_sv.bedpe"), ">",
paste0(DIR, sampleID, "/",SVCaller_names[1],"_vs_",SVCaller_names[2],"_sv.bedpe")))
if(file.info(paste0(DIR, sampleID, "/",SVCaller_names[1],"_vs_",SVCaller_names[2],"_sv.bedpe"))$size==0){
pairtopair <- c()
}else{
pairtopair <- read.table(paste0(DIR, sampleID, "/",SVCaller_names[1],"_vs_",SVCaller_names[2],"_sv.bedpe"), header =FALSE, sep="\t",stringsAsFactors=FALSE, quote="")
pairtopair <- cbind(pairtopair[,c(1:6)],
stringr::str_split_fixed(pairtopair[,7],";",3)[,1],
stringr::str_split_fixed(pairtopair[,7],";",3)[,2],
stringr::str_split_fixed(pairtopair[,7],";",3)[,3],
pairtopair[,c(8:13)],
stringr::str_split_fixed(pairtopair[,14],";",3)[,1],
stringr::str_split_fixed(pairtopair[,14],";",3)[,2],
stringr::str_split_fixed(pairtopair[,14],";",3)[,3])
colnames(pairtopair) <- c("caller1_chrom1","caller1_start1","caller1_end1",
"caller1_chrom2","caller1_start2","caller1_end2",
"caller1_ID","caller1_SVTYPE","caller1_FILTER",
"caller2_chrom1","caller2_start1","caller2_end1",
"caller2_chrom2","caller2_start2","caller2_end2",
"caller2_ID","caller2_SVTYPE","caller2_FILTER")
main_chroms <- c("chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7",
"chr8", "chr9", "chr10", "chr11", "chr12", "chr13", "chr14",
"chr15", "chr16", "chr17", "chr18", "chr19", "chr20", "chr21", "chr22", "chrX", "chrY")
pairtopair <- pairtopair[(pairtopair$caller1_chrom1 %in% main_chroms) &
(pairtopair$caller1_chrom2 %in% main_chroms) &
(pairtopair$caller2_chrom1 %in% main_chroms) &
(pairtopair$caller2_chrom2 %in% main_chroms),]
}
return(pairtopair)
}
SV_integration <- function(sampleID, vcf_files, bkpt_T_callers, SVCaller_names, PASS_filter, svtype_ignore,bedtools_dir){
DIR <- "./"
dir.create(paste0(DIR, sampleID))
pairtopair <- SVCaller_union_intersect_generate(sampleID, vcf_files, bkpt_T_callers, SVCaller_names, bedtools_dir, DIR)
if(length(pairtopair)==0){
caller1_bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(vcf_files[1], caller= SVCaller_names[1])
caller1_bedpe$caller2_ID <- NA
}else{
if(PASS_filter=="both" & (!svtype_ignore)){
pairtopair_filtered <- pairtopair[pairtopair$caller1_FILTER=="PASS" & pairtopair$caller2_FILTER=="PASS" &
pairtopair$caller1_SVTYPE == pairtopair$caller2_SVTYPE ,]
}else if(PASS_filter=="one"& (!svtype_ignore)){
pairtopair_filtered <- pairtopair[(pairtopair$caller1_FILTER=="PASS" | pairtopair$caller2_FILTER=="PASS") &
pairtopair$caller1_SVTYPE == pairtopair$caller2_SVTYPE,]
}else{pairtopair_filtered <- pairtopair[pairtopair$caller1_SVTYPE == pairtopair$caller2_SVTYPE,]}
caller1_bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(vcf_files[1], caller= SVCaller_names[1])
caller1_bedpe_filtered <- caller1_bedpe[caller1_bedpe$ID %in% pairtopair_filtered$caller1_ID, ]
caller1_ID <- unique(pairtopair_filtered$caller1_ID)
caller2_ID <- c()
for(i in c(1:length(unique(pairtopair_filtered$caller1_ID)))){
caller2_ID <- c(caller2_ID,
paste(pairtopair_filtered[pairtopair_filtered$caller1_ID == caller1_ID[i],]$caller2_ID, collapse = ","))
}
caller1_bedpe$caller2_ID <- NA
caller1_bedpe$caller2_ID[match(caller1_ID, caller1_bedpe$ID)] <- caller2_ID
vcf <- VariantAnnotation::readVcf(file= vcf_files[1], "hg38")
gr <- vcf@rowRanges
vcf_filtered <- vcf[gr@ranges@NAMES %in% c(caller1_bedpe_filtered$ID_caller,
caller1_bedpe_filtered$INFO_MATEID_caller[!is.na(caller1_bedpe_filtered$INFO_MATEID_caller)]),]
VariantAnnotation::writeVcf(vcf_filtered , paste0("SVUtil_",sampleID,"_",SVCaller_names[1], "_vs_",SVCaller_names[2],"_", PASS_filter,"_PASS_","sametype",".vcf"))
cat(paste0(sampleID," filtered VCF write.\n"))
}
return(caller1_bedpe)
}
Standard_bedtool_prepare_bkpt <- function(SV_data, bkpt_T_callers,caller){
caller_bedpe <- StructuralVariantUtil::simple_SVTYPE_classification(SV_data, caller)
bedpe <- data.frame(chrom1 = caller_bedpe$chrom1,
start1 = caller_bedpe$start1-(bkpt_T_callers/2),
end1 = caller_bedpe$end1+(bkpt_T_callers/2),
chrom2 = caller_bedpe$chrom2,
start2 = caller_bedpe$start2-(bkpt_T_callers/2),
end2 = caller_bedpe$end2+(bkpt_T_callers/2),
ID = paste0(caller_bedpe$ID,";",caller_bedpe$SVTYPE,";",caller_bedpe$FILTER))
if (sum(bedpe$start1<0)!=0){bedpe[bedpe$start1<0,]$start1 <- 0}
if (sum(bedpe$start2<0)!=0){bedpe[bedpe$start2<0,]$start2 <- 0}
return(bedpe)
}
DIR <- "./"
setwd(DIR)
sampleID <- "COLO829"
######## CHECKING VCF from each caller
vcf_file <- paste0(DIR,"COLO829/delly_COLO829_VAF_1_Tcov_80_Ncov_30.sv.somatic.PASS.recode.vcf"); caller_name <- "delly"
df <- StructuralVariantUtil::vcf_to_dataframe(vcf_file)
head(df)
devtools::document()
devtools::document()
?sum
?strsplit
devtools::document()
devtools::document()
render("vignettes/vignette.Rmd")
devtools::render("vignettes/vignette.Rmd")
devtools::build_rmd("vignettes/vignette.Rmd")
pdf_document("vignettes/vignette.Rmd")
devtools
?devtools
?build_rmd
?build_pdf
output: pdf_document("vignettes/vignette.Rmd")
rmarkdown::pdf_document("vignettes/vignette.Rmd")
usethis::use_readme_rmd()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
devtools::build_readme()
library("StructuralVariationUtil")
library("StructuralVariantUtil")
usethis::use_readme_rmd()
devtools::build_readme()
devtools::build_readme()
knit(input="readme.rmd", output = "readme.md")
?knit
knit::knit(input="readme.rmd", output = "readme.md")
install.packages("knit")
knitr::knit(input="readme.rmd", output = "readme.md")
knitr::knit(input="README.rmd", output = "README.md")
knitr::knit(input="README.rmd", output = "README.md")
library(RColorBrewer)
library("ggplot2")
library(ggpubr)
library(plyr)
theme1 <-  theme(axis.text=element_text(size=12,face="bold"),
axis.title=element_text(size=14,face="bold"),
axis.text.x = element_text(angle = 90, hjust = 1, size = 8),
plot.title = element_text(size=14),
legend.text = element_text(size=14,face="bold"),
#legend.title = element_text(size=12,face="bold"),
legend.title = element_blank(),
legend.position="top")
theme2 <-  theme(axis.text=element_text(size=12,face="bold"),
axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=14),
legend.text = element_text(size=12,face="bold"),
#legend.title = element_text(size=12,face="bold"),
legend.title = element_blank(),
legend.position="top")
theme6 <-  theme(axis.text=element_text(size=12,face="bold"),
axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=14),
legend.text = element_text(size=12,face="bold"),
legend.title = element_blank(),
legend.position="none")
theme7 <-  theme(axis.text=element_text(size=12,face="bold"),
axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=14),
legend.text = element_text(size=12,face="bold"),
#legend.title = element_text(size=12,face="bold"),
legend.title = element_blank(),
legend.position="right")
################## Figure :SV calling integration ###################
vcf_files <- c(paste0(DIR,"COLO829/filter_COLO829_delly_T100X_purity100_N30.sv.somatic.PASS.recode.vcf"),
paste0(DIR,"COLO829/filter_COLO829_100X_purity100_R30x.svaba.somatic.sv.vcf"),
paste0(DIR, "COLO829/filter_manta_org_purity100_R30_somaticSV.vcf"),
paste0(DIR,"COLO829/filter_COLO829_gridss_T100X_purity100_N30.sv.somatic.vcf"),
paste0(DIR, "COLO829/truthset_somaticSVs_COLO829.vcf")); SVCaller_names <- c("delly","svaba","manta","gridss","truth")
INFO_SVTYPE <- c()
DIR="/Users/tingtinggong/Desktop/Fudan_University/Lung_cancer_project/Evaluation/"
vcf_files <- c(paste0(DIR,"COLO829/filter_COLO829_delly_T100X_purity100_N30.sv.somatic.PASS.recode.vcf"),
paste0(DIR,"COLO829/filter_COLO829_100X_purity100_R30x.svaba.somatic.sv.vcf"),
paste0(DIR, "COLO829/filter_manta_org_purity100_R30_somaticSV.vcf"),
paste0(DIR,"COLO829/filter_COLO829_gridss_T100X_purity100_N30.sv.somatic.vcf"),
paste0(DIR, "COLO829/truthset_somaticSVs_COLO829.vcf")); SVCaller_names <- c("delly","svaba","manta","gridss","truth")
INFO_SVTYPE <- c()
for(i in c(1:length(SVCaller_names))){
df <- vcf_to_dataframe(vcf_files[i])
tmp <- cbind(data.frame(table(df$INFO_SVTYPE)),SVCaller = SVCaller_names[i])
INFO_SVTYPE <- rbind(INFO_SVTYPE, tmp)
}
colnames(INFO_SVTYPE) <- c("SVTYPE","count","SVCaller")
SVTYPE <- c()
for(i in c(1:length(SVCaller_names))){
bedpe <- simple_SVTYPE_classification(SV_data = vcf_files[i], caller_name=SVCaller_names[i])
tmp <- cbind(data.frame(table(bedpe$SVTYPE)),SVCaller = SVCaller_names[i])
SVTYPE <- rbind(SVTYPE, tmp)
}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
set.seed(1)
newdata <- data.frame(sampleID = paste0("sample_",c(1:100)), VAF = round(rnorm(100, mean=0.5, sd=0.1),digits = 2), N_coverage = round(rnorm(100, mean=30, sd=10),digits = 2), T_coverage = round(rnorm(100, mean=60, sd=10),digits = 2), BND_threshold = 100)
head(newdata)
set.seed(1)
newdata <- data.frame(sampleID = paste0("sample_",c(1:100)), VAF = round(rnorm(100, mean=0.5, sd=0.1),digits = 2), N_coverage = round(rnorm(100, mean=30, sd=10),digits = 2), T_coverage = round(rnorm(100, mean=60, sd=10),digits = 2), BND_threshold = 100)
head(newdata)
SVdata_for_circos <- prepare_SV_for_circos(bedpe)
devtools::install_github("tgong1/StructuralVariantUtil")
library(StructuralVariantAnnotation)
SVdata_for_circos <- prepare_SV_for_circos(bedpe)
library(StructuralVariantUtil)
SVdata_for_circos <- prepare_SV_for_circos(bedpe)
library(StructuralVariantUtil)
bedpe <- simple_SVTYPE_classification(SV_data = vcf_file, caller_name="manta")
vcf_file <- system.file("extdata", "manta_sample1.vcf",package = "StructuralVariantUtil")
library(StructuralVariantUtil)
bedpe <- simple_SVTYPE_classification(SV_data = vcf_file, caller_name="manta")
head(bedpe)
SVdata_for_circos <- prepare_SV_for_circos(bedpe)
SVColours <- c(RColorBrewer::brewer.pal(n = 5, name = 'Set1'))
names(SVColours) <- c("DEL", "DUP", "INS", "INV", "TRA")
circlize::circos.initializeWithIdeogram(species = "hg38", plotType = c("ideogram", "labels"))
circlize::circos.genomicLink(SVdata_for_circos[[1]], SVdata_for_circos[[2]],
col = SVColours[match(SVdata_for_circos[[1]]$SVTYPE, names(SVColours))],h=0.2)
circlize::circos.genomicLink(SVdata_for_circos[[3]],SVdata_for_circos[[4]],
col = SVColours[match(SVdata_for_circos[[3]]$SVTYPE, names(SVColours))])
title(main = "sample_1")
lgd_links = ComplexHeatmap::Legend(at = c("DEL", "DUP", "INS", "INV", "TRA"), legend_gp = grid::gpar(fill=SVColours), type ="grid",by_row = TRUE,ncol=5,
title_position = "topleft", title = "SV")
ComplexHeatmap::draw(lgd_links,
y = ggplot2::unit(ComplexHeatmap:::height(lgd_links), "mm"))
circlize::circos.clear()
set.seed(1)
newdata <- data.frame(sampleID = paste0("sample_",c(1:100)), VAF = round(rnorm(100, mean=0.5, sd=0.1),digits = 2), N_coverage = round(rnorm(100, mean=30, sd=10),digits = 2), T_coverage = round(rnorm(100, mean=60, sd=10),digits = 2), BND_threshold = 100)
head(newdata)
#library("StructuralVariantUtil")
df_prediction <- ShinySoSV_prediction(Candidate_callers, newdata, performance, callset)
set.seed(1)
newdata <- data.frame(sampleID = paste0("sample_",c(1:100)), VAF = round(rnorm(100, mean=0.5, sd=0.1),digits = 2), N_coverage = round(rnorm(100, mean=30, sd=10),digits = 2), T_coverage = round(rnorm(100, mean=60, sd=10),digits = 2), BND_threshold = 100)
head(newdata)
performance <- "F1_score"
callset <- "individual"
candidate_callers <- c("Manta","Lumpy","GRIDSS","Delly","SvABA")
library("StructuralVariantUtil")
setwd("~/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script2")
df_prediction <- ShinySoSV_prediction(Candidate_callers, newdata, performance, callset)
head(df_prediction)
union_ID <- integrated_bedpe[, (ncol(integrated_bedpe)-length(SVCaller_names)+1):ncol(integrated_bedpe)]
vcf_files<- c(system.file("extdata", "manta_SVEngine_TumorSV2.60x_NormalSV1.60x_0.5.T.PASS.recode.vcf", package = "StructuralVariantUtil"),
system.file("extdata", "GRIDSS_SVEngine_TumorSV2.60x_NormalSV1.60x_0.5_somatic_PASS_annotated.vcf", package = "StructuralVariantUtil"))
sampleID <- "sample_1"
SVCaller_names <- c("manta","gridss")
integrated_bedpe <- SV_integration(vcf_files, SVCaller_names, sampleID)
head(integrated_bedpe)
union_ID <- integrated_bedpe[, (ncol(integrated_bedpe)-length(SVCaller_names)+1):ncol(integrated_bedpe)]
for(i in c(1: length(SVCaller_names))){
index <- rowSums(!is.na(union_ID)) != 1 & (!is.na(union_ID[,i]))
union_ID[index,i] <- integrated_bedpe[index,]$ID
assign(SVCaller_names[i], union_ID[,i][!is.na(union_ID[,i])])
}
x <- do.call("list", lapply(SVCaller_name,function(s) eval(parse(text=s))))
union_ID <- integrated_bedpe[, (ncol(integrated_bedpe)-length(SVCaller_names)+1):ncol(integrated_bedpe)]
for(i in c(1: length(SVCaller_names))){
index <- rowSums(!is.na(union_ID)) != 1 & (!is.na(union_ID[,i]))
union_ID[index,i] <- integrated_bedpe[index,]$ID
assign(SVCaller_names[i], union_ID[,i][!is.na(union_ID[,i])])
}
x <- do.call("list", lapply(SVCaller_names,function(s) eval(parse(text=s))))
g <- VennDiagram::venn.diagram(
x = x,
category.names = SVCaller_name,
# Circles
lwd = 2,
fill = RColorBrewer::brewer.pal(3, "Pastel2")[1:length(SVCaller_name)],
# Numbers
cex = 1,
fontface = "bold",
filename = NULL,
output=FALSE
)
union_ID <- integrated_bedpe[, (ncol(integrated_bedpe)-length(SVCaller_names)+1):ncol(integrated_bedpe)]
for(i in c(1: length(SVCaller_names))){
index <- rowSums(!is.na(union_ID)) != 1 & (!is.na(union_ID[,i]))
union_ID[index,i] <- integrated_bedpe[index,]$ID
assign(SVCaller_names[i], union_ID[,i][!is.na(union_ID[,i])])
}
x <- do.call("list", lapply(SVCaller_names,function(s) eval(parse(text=s))))
g <- VennDiagram::venn.diagram(
x = x,
category.names = SVCaller_names,
# Circles
lwd = 2,
fill = RColorBrewer::brewer.pal(3, "Pastel2")[1:length(SVCaller_name)],
# Numbers
cex = 1,
fontface = "bold",
filename = NULL,
output=FALSE
)
union_ID <- integrated_bedpe[, (ncol(integrated_bedpe)-length(SVCaller_names)+1):ncol(integrated_bedpe)]
for(i in c(1: length(SVCaller_names))){
index <- rowSums(!is.na(union_ID)) != 1 & (!is.na(union_ID[,i]))
union_ID[index,i] <- integrated_bedpe[index,]$ID
assign(SVCaller_names[i], union_ID[,i][!is.na(union_ID[,i])])
}
x <- do.call("list", lapply(SVCaller_names,function(s) eval(parse(text=s))))
g <- VennDiagram::venn.diagram(
x = x,
category.names = SVCaller_names,
# Circles
lwd = 2,
fill = RColorBrewer::brewer.pal(3, "Pastel2")[1:length(SVCaller_names)],
# Numbers
cex = 1,
fontface = "bold",
filename = NULL,
output=FALSE
)
grid::grid.newpage()
grid::grid.draw(g)
All_sampleID <- paste0("sample",c(1,2,3))
vcf_files <- c(system.file("extdata", "manta_sample1.vcf", package = "StructuralVariantUtil"),
system.file("extdata", "manta_sample2.vcf", package = "StructuralVariantUtil"),
system.file("extdata", "manta_sample3.vcf", package = "StructuralVariantUtil"))
Spectrum_SVTYPE <- spectrum_SV_type(All_sampleID, All_SV_data = vcf_files)
Spectrum_SVTYPE
data(list)
All_sampleID <- paste0("sample_",c(1:100))
results <- spectrum_SV_type(All_sampleID, All_SV_data =list, identify_hyperSV_tumour = TRUE)
Spectrum_SVTYPE <- results[[1]]
head(Spectrum_SVTYPE)
Hyper_SV_sample <- results[[2]]
Hyper_SV_sample
devtools::document()
