devtools::document()
set.seed(1)
ShinySoSV_newdata <- data.frame(sampleID = paste0("sample_",c(1:100)),
VAF = round(rnorm(100, mean=0.5, sd=0.1),digits = 2),
N_coverage = round(rnorm(100, mean=30, sd=10),digits = 2),
T_coverage = round(rnorm(100, mean=60, sd=10),digits = 2),
BND_threshold = 100)
usethis::use_data(ShinySoSV_newdata,overwrite = TRUE)
devtools::install()
usethis::use_vignette("vignette")
install.packages("rmarkdown")
?render
render("vignette.Rmd","pdf_document")
library("rmarkdown")
render("vignette.Rmd","pdf_document")
render("vignettes/vignette.Rmd","pdf_document")
render("vignettes/vignette.Rmd")
install.packages("tinytex")
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::install_tinytex()
install.packages("tinytex")
install.packages("tinytex")
tinytex::install_tinytex()
render("vignettes/vignette.Rmd","pdf_document")
library("rmarkdown")
render("vignettes/vignette.Rmd","pdf_document")
devtools::document()
load(url("https://github.com/tgong1/Shiny-SoSV/tree/master/data/gamsen_callers.RData"))
x <- RCurl::getURL("https://github.com/tgong1/Shiny-SoSV/tree/master/data/gamsen_callers.RData")
y <- load(x)
save(version = 3)
directory <- "~/Desktop/work_at_home/HRPCa_SV_method_paper/TEST_R_script2/"
model_name1 <- paste0(c("sen", "pre_off", "F1_score"))
model_name2 <- paste0(c("", "_UnionIntersect", "_UnionIntersect"))
model_name <- apply(expand.grid(model_name1, model_name2), 1, paste, collapse="")
for(i in c(1:length(model_name))){
load(paste0(directory,"./Shiny-SoSV/data/","gam",model_name[i],"_callers.RData"))
}
candidate_callers <- c("Manta", "GRIDSS", "Delly","Lumpy","SvABA")
combine_SV_SVcaller <- c()
for(callset in c("union","intersection","individual")){
if(callset %in% c("union","intersection")){
for (i in c(1:length(candidate_callers))){
combine_SV_SVcaller <- c(combine_SV_SVcaller, paste0(candidate_callers[i], candidate_callers[!(c(1:length(candidate_callers)) %in% i)],c("Union","Intersect")[c("union", "intersection") %in% callset]))
}
}else{
combine_SV_SVcaller <- c(combine_SV_SVcaller, candidate_callers)
}
}
do.call(usethis::use_data, c(lapply(c(paste0("gamsen_", combine_SV_SVcaller),
paste0("gampre_off_", combine_SV_SVcaller),
paste0("gamF1_score_", combine_SV_SVcaller)), as.name),internal = TRUE, overwrite = TRUE))
